{
  "api/Hyperledger.Indy.PoolApi.Pool.html": {
    "href": "api/Hyperledger.Indy.PoolApi.Pool.html",
    "title": "Class Pool | Hyperledger Indy .NET Wrapper",
    "keywords": "Class Pool Represents a connection to a pool of ledger nodes and provides static methods for managing connections to pools. Inheritance System.Object Pool Implements System.IDisposable Namespace : Hyperledger.Indy.PoolApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public sealed class Pool : Object, IDisposable Methods CloseAsync() Closes the pool. Declaration public Task CloseAsync() Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation completes. Remarks note Once a Pool instance is closed it cannot be opened again. Instead call the OpenPoolLedgerAsync(String, String) method to open a new Pool instance. CreatePoolLedgerConfigAsync(String, String) Creates a new local pool configuration with the specified name that can be used later to open a connection to pool nodes. Declaration public static Task CreatePoolLedgerConfigAsync(string configName, string config) Parameters Type Name Description System.String configName The name for the configuration. System.String config The configuration JSON. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task<> with no return value that completes when the configuration is created. Remarks If the configuration specified in the config parameter is null then the default configuration will be used, however if specified the value should adhere to the following JSON format: { \"genesis_txn\": \"path/to/genesis/transaction/file\" } If the value of the genesis_txn key in the JSON is null then a default file will be used. If the file specified does not exist it will be created. See Also OpenPoolLedgerAsync(String, String) DeletePoolLedgerConfigAsync(String) DeletePoolLedgerConfigAsync(String) Deletes an existing pool configuration. Declaration public static Task DeletePoolLedgerConfigAsync(string configName) Parameters Type Name Description System.String configName The name of the configuration to delete. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task<> with no return value that completes when the configuration is deleted. See Also CreatePoolLedgerConfigAsync(String, String) Dispose() Disposes of resources. Declaration public void Dispose() Finalize() Finalizes the resource during GC if it hasn't been already. Declaration protected override void Finalize() ListPoolsAsync() Lists names of created pool ledgers Declaration public static Task<string> ListPoolsAsync() Returns Type Description System.Threading.Tasks.Task < System.String > The pools json. OpenPoolLedgerAsync(String, String) Opens a pool and connects to the ledger nodes. Declaration public static Task<Pool> OpenPoolLedgerAsync(string configName, string config) Parameters Type Name Description System.String configName The name of the pool configuration to use. System.String config The runtime configuration to use. Returns Type Description System.Threading.Tasks.Task < Pool > An asynchronous System.Threading.Tasks.Task<> that resolves to a Pool instance once the pool is opened. Remarks A Pool cannot be opened unless the a pool configuration with the specified name was previously configured using the CreatePoolLedgerConfigAsync(String, String) method. When opening a pool the runtime configuration can be specified using the config parameter, which expects a JSON string with the following format: { \"refresh_on_open\": bool (optional), Forces pool ledger to be refreshed immediately after opening. Defaults to true. \"auto_refresh_time\": int (optional), After this time in minutes pool ledger will be automatically refreshed. Use 0 to disable automatic refresh. Defaults to 24*60. \"network_timeout\": int (optional), Network timeout for communication with nodes in milliseconds. Defaults to 20000. } If the config parameter is null then the default configuration will be used. note Attempting to open a pool with the same name more than once will result in an error. RefreshAsync() Refreshes a local copy of the pool and updates the pool's node connections. Declaration public Task RefreshAsync() Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation completes. Implements System.IDisposable"
  },
  "api/Hyperledger.Indy.WalletApi.Wallet.html": {
    "href": "api/Hyperledger.Indy.WalletApi.Wallet.html",
    "title": "Class Wallet | Hyperledger Indy .NET Wrapper",
    "keywords": "Class Wallet Represents a wallet that stores key value records and provides static methods for managing wallets. Inheritance System.Object Wallet Implements System.IDisposable Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public sealed class Wallet : Object, IDisposable Methods CloseAsync() Closes the wallet. Declaration public Task CloseAsync() Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task with no return value that completes when the operation completes. CreateWalletAsync(String, String, String, String, String) Creates a new wallet. Declaration public static Task CreateWalletAsync(string poolName, string name, string type, string config, string credentials) Parameters Type Name Description System.String poolName The name of the pool the wallet is associated with. System.String name The name of the wallet. System.String type The type of the wallet. System.String config The wallet configuration JSON. System.String credentials The wallet credentials JSON or null to use the default credentials. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task with no return value the completes when the operation has finished. Remarks Each created wallet is given a name which is then subsequently used to open it with the OpenWalletAsync(String, String, String) or delete it using the DeleteWalletAsync(String, String) static methods. note Wallet names must be unique within a pool. When creating a new Wallet the type parameter can be null or \"default\" to use the default wallet implementation, or a type name specified in an earlier call to the RegisterWalletTypeAsync(String, WalletType) method to use a custom wallet implementation. Attempting to use a wallet type that hasn't previously been registered will result in an error. The config parameter allows configuration values to be passed to the wallet when it is created. When using the default wallet this value can be null to use the default wallet configuration or a JSON string with the following format can be used: { \"freshness_time\": int } The value of the freshness_time key is an integer representing the number of seconds a value in the wallet will remain valid before expiring. If not specified the default value for freshness_time is 24 * 60 seconds. If using a custom wallet type the content of the config parameter can be any string value; it is up to the custom wallet type implementer to interpret the value. The credentials parameter is unused in the default wallet at present, however the value can be used by custom wallet implementations; it is up to the custom wallet type implementer to interpret the value. DeleteWalletAsync(String, String) Deletes a wallet. Declaration public static Task DeleteWalletAsync(string name, string credentials) Parameters Type Name Description System.String name The name of the wallet to delete. System.String credentials The wallet credentials. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task with no return value that completes when the operation completes. Remarks Deletes a wallet created earlier using the CreateWalletAsync(String, String, String, String, String) by name. The credentials parameter is unused in the default wallet at present, however the value can be used by custom wallet implementations; it is up to the custom wallet type implementer to interpret the value. Dispose() Disposes of resources. Declaration public void Dispose() Finalize() Finalizes the resource during GC if it hasn't been already. Declaration protected override void Finalize() ListWalletsAsync() Lists created wallets as JSON array with each wallet metadata: name, type, name of associated pool Declaration public static Task<string> ListWalletsAsync() Returns Type Description System.Threading.Tasks.Task < System.String > The wallets async. OpenWalletAsync(String, String, String) Opens a Wallet. Declaration public static Task<Wallet> OpenWalletAsync(string name, string runtimeConfig, string credentials) Parameters Type Name Description System.String name The name of the Wallet to open. System.String runtimeConfig The runtime configuration to override the configuration the wallet was created with. System.String credentials The wallet credentials. Returns Type Description System.Threading.Tasks.Task < Wallet > An asynchronous System.Threading.Tasks.Task<> that resolves to a Wallet instance when the operation completes. Remarks Opens a wallet by name using the name of a wallet created earlier using the CreateWalletAsync(String, String, String, String, String) method. note Attempting to open the same wallet more than once will result in an error. The runtimeConfig parameter allows the default configuration of the wallet to be overridden while opening the wallet; this does not replace the configuration registered when the wallet was created but instead overrides it for the duration of this opening only. See the CreateWalletAsync(String, String, String, String, String) method for details on the configuration string supported by the default wallet type; custom wallet types will can support their own format. The credentials parameter is unused in the default wallet at present, however the value can be used by custom wallet implementations; it is up to the custom wallet type implementer to interpret the value. RegisterWalletTypeAsync(String, WalletType) Registers a custom wallet type implementation. Declaration public static Task RegisterWalletTypeAsync(string typeName, WalletType walletType) Parameters Type Name Description System.String typeName The name of the custom wallet type. WalletType walletType An instance of a class derived from WalletType containing the logic for the custom wallet type. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task with no return value that completes when the registration is complete. Remarks This method allows custom wallet implementations to be registered at runtime so that alternatives to the default wallet type can be used. Implementing a custom wallet is achieved by deriving from the WalletType class - see the WalletType and ICustomWallet classes for further detail. Each custom wallet type is registered with a name which can subsequently be used when creating a new wallet using the CreateWalletAsync(String, String, String, String, String) method. Implements System.IDisposable"
  },
  "api/Hyperledger.Indy.WalletApi.WalletType.html": {
    "href": "api/Hyperledger.Indy.WalletApi.WalletType.html",
    "title": "Class WalletType | Hyperledger Indy .NET Wrapper",
    "keywords": "Class WalletType Base type for implementing custom wallet types. Inheritance System.Object WalletType Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public abstract class WalletType : Object Constructors WalletType() Initializes a new WalletType. Declaration protected WalletType() Methods Close(Int32) Allows an implementer to close a wallet. Declaration public abstract ErrorCode Close(int walletHandle) Parameters Type Name Description System.Int32 walletHandle The handle of the wallet to close. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation. Remarks When implementing a custom wallet this method is responsible for closing the wallet with the handle allocated earlier in the Open(String, String, String, String, out Int32) method. Create(String, String, String) Allows an implementer to create a new wallet. Declaration public abstract ErrorCode Create(string name, string config, string credentials) Parameters Type Name Description System.String name The name of the wallet to create. System.String config The configuration for the wallet. System.String credentials The credentials for the wallet. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation. Remarks When implementing a custom wallet this method is responsible for creating the new wallet and storing its configuration and credentials. Delete(String, String, String) Allows an implementer to delete a wallet. Declaration public abstract ErrorCode Delete(string name, string config, string credentials) Parameters Type Name Description System.String name The name of the wallet being deleted System.String config The configuration of the wallet. System.String credentials The credentials of the wallet. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation. Remarks When implementing a custom wallet this method is responsible for deleting a wallet created earlier via the Create(String, String, String) method. The value of the credentials parameter should be used to control access whether or not the wallet can be deleted. GetWalletByHandle(Int32) Gets a wallet by its handle. Declaration protected abstract ICustomWallet GetWalletByHandle(int walletHandle) Parameters Type Name Description System.Int32 walletHandle The handle of the wallet. Returns Type Description ICustomWallet The wallet instance associated with the handle. Open(String, String, String, String, out Int32) Allows an implementer to open a wallet. Declaration public abstract ErrorCode Open(string name, string config, string runtimeConfig, string credentials, out int walletHandle) Parameters Type Name Description System.String name The name of the wallet to open. System.String config The configuration for the wallet. System.String runtimeConfig The runtime configuration for the wallet. System.String credentials The credentials of the wallet. System.Int32 walletHandle The handle assigned to the wallet. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation. Remarks When implementing a custom wallet this method is responsible for opening the wallet and returning a handle for the opened wallet. The value of the runtimeConfig parameter should override any corresponding values provided in the config parameter and value of the credentials parameter should be used to control access to the wallet."
  },
  "api/Hyperledger.Indy.WalletApi.WalletValueNotFoundException.html": {
    "href": "api/Hyperledger.Indy.WalletApi.WalletValueNotFoundException.html",
    "title": "Class WalletValueNotFoundException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class WalletValueNotFoundException Exception thrown when requesting a value from a wallet and the specified key does not exist. Inheritance System.Object IndyException WalletValueNotFoundException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class WalletValueNotFoundException : IndyException"
  },
  "api/Hyperledger.Indy.AnonCredsApi.AnoncredsAccumulatorFullException.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.AnoncredsAccumulatorFullException.html",
    "title": "Class AnoncredsAccumulatorFullException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class AnoncredsAccumulatorFullException Exception thrown when an anoncreds accumulator is full. Inheritance System.Object IndyException AnoncredsAccumulatorFullException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class AnoncredsAccumulatorFullException : IndyException"
  },
  "api/Hyperledger.Indy.DidApi.CreateAndStoreMyDidResult.html": {
    "href": "api/Hyperledger.Indy.DidApi.CreateAndStoreMyDidResult.html",
    "title": "Class CreateAndStoreMyDidResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class CreateAndStoreMyDidResult Result of creating and storing my DID. Inheritance System.Object CreateAndStoreMyDidResult Namespace : Hyperledger.Indy.DidApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public sealed class CreateAndStoreMyDidResult : Object Properties Did Gets the DID. Declaration public string Did { get; } Property Value Type Description System.String VerKey Gets the verification key. Declaration public string VerKey { get; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.ErrorCode.html": {
    "href": "api/Hyperledger.Indy.ErrorCode.html",
    "title": "Class ErrorCode | Hyperledger Indy .NET Wrapper",
    "keywords": "Class ErrorCode Error codes Inheritance System.Object ErrorCode Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public sealed class ErrorCode : Enum Fields AnoncredsAccumulatorIsFull Accumulator is full Declaration public const ErrorCode AnoncredsAccumulatorIsFull Field Value Type Description ErrorCode AnoncredsClaimRevoked Claim revoked Declaration public const ErrorCode AnoncredsClaimRevoked Field Value Type Description ErrorCode AnoncredsInvalidUserRevocIndex Invalid user revocation index Declaration public const ErrorCode AnoncredsInvalidUserRevocIndex Field Value Type Description ErrorCode AnoncredsMasterSecretDuplicateNameError Attempt to generate master secret with duplicated name Declaration public const ErrorCode AnoncredsMasterSecretDuplicateNameError Field Value Type Description ErrorCode AnoncredsNotIssuedError Not issued error Declaration public const ErrorCode AnoncredsNotIssuedError Field Value Type Description ErrorCode AnoncredsProofRejected Proof rejected Declaration public const ErrorCode AnoncredsProofRejected Field Value Type Description ErrorCode AnoncredsRevocationRegistryFullError Revocation registry is full and creation of new registry is necessary Declaration public const ErrorCode AnoncredsRevocationRegistryFullError Field Value Type Description ErrorCode CommonInvalidParam1 Caller passed invalid value as param 1 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam1 Field Value Type Description ErrorCode CommonInvalidParam10 Caller passed invalid value as param 10 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam10 Field Value Type Description ErrorCode CommonInvalidParam11 Caller passed invalid value as param 11 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam11 Field Value Type Description ErrorCode CommonInvalidParam12 Caller passed invalid value as param 12 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam12 Field Value Type Description ErrorCode CommonInvalidParam2 Caller passed invalid value as param 2 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam2 Field Value Type Description ErrorCode CommonInvalidParam3 Caller passed invalid value as param 3 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam3 Field Value Type Description ErrorCode CommonInvalidParam4 Caller passed invalid value as param 4 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam4 Field Value Type Description ErrorCode CommonInvalidParam5 Caller passed invalid value as param 5 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam5 Field Value Type Description ErrorCode CommonInvalidParam6 Caller passed invalid value as param 6 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam6 Field Value Type Description ErrorCode CommonInvalidParam7 Caller passed invalid value as param 7 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam7 Field Value Type Description ErrorCode CommonInvalidParam8 Caller passed invalid value as param 8 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam8 Field Value Type Description ErrorCode CommonInvalidParam9 Caller passed invalid value as param 9 (null, invalid json and etc..) Declaration public const ErrorCode CommonInvalidParam9 Field Value Type Description ErrorCode CommonInvalidState Invalid library state was detected in runtime. It signals library bug Declaration public const ErrorCode CommonInvalidState Field Value Type Description ErrorCode CommonInvalidStructure Object (json, config, key, claim and etc...) passed by library caller has invalid structure Declaration public const ErrorCode CommonInvalidStructure Field Value Type Description ErrorCode CommonIOError IO Error Declaration public const ErrorCode CommonIOError Field Value Type Description ErrorCode LedgerInvalidTransaction Attempt to send unknown or incomplete transaction message Declaration public const ErrorCode LedgerInvalidTransaction Field Value Type Description ErrorCode LedgerNoConsensusError No consensus during ledger operation Declaration public const ErrorCode LedgerNoConsensusError Field Value Type Description ErrorCode LedgerSecurityError Attempt to send transaction without the necessary privileges Declaration public const ErrorCode LedgerSecurityError Field Value Type Description ErrorCode PoolLedgerConfigAlreadyExistsError Attempt to create pool ledger config with name used for another existing pool Declaration public const ErrorCode PoolLedgerConfigAlreadyExistsError Field Value Type Description ErrorCode PoolLedgerInvalidPoolHandle Caller passed invalid pool ledger handle Declaration public const ErrorCode PoolLedgerInvalidPoolHandle Field Value Type Description ErrorCode PoolLedgerNotCreatedError Trying to open pool ledger that wasn't created before Declaration public const ErrorCode PoolLedgerNotCreatedError Field Value Type Description ErrorCode PoolLedgerTerminated Pool ledger terminated Declaration public const ErrorCode PoolLedgerTerminated Field Value Type Description ErrorCode PoolLedgerTimeout Pool ledger timeout Declaration public const ErrorCode PoolLedgerTimeout Field Value Type Description ErrorCode SignusUnknownCryptoError Unknown format of DID entity keys Declaration public const ErrorCode SignusUnknownCryptoError Field Value Type Description ErrorCode Success Call succeeded. Declaration public const ErrorCode Success Field Value Type Description ErrorCode value__ Declaration public int value__ Field Value Type Description System.Int32 WalletAlreadyExistsError Attempt to create wallet with name used for another exists wallet Declaration public const ErrorCode WalletAlreadyExistsError Field Value Type Description ErrorCode WalletAlreadyOpenedError Trying to open wallet that was opened already Declaration public const ErrorCode WalletAlreadyOpenedError Field Value Type Description ErrorCode WalletIncompatiblePoolError Trying to use wallet with pool that has different name Declaration public const ErrorCode WalletIncompatiblePoolError Field Value Type Description ErrorCode WalletInvalidHandle Caller passed invalid wallet handle Declaration public const ErrorCode WalletInvalidHandle Field Value Type Description ErrorCode WalletNotFoundError Requested entity id isn't present in wallet Declaration public const ErrorCode WalletNotFoundError Field Value Type Description ErrorCode WalletTypeAlreadyRegisteredError Attempt to register already existing wallet type Declaration public const ErrorCode WalletTypeAlreadyRegisteredError Field Value Type Description ErrorCode WalletUnknownTypeError Unknown type of wallet was passed on create_wallet Declaration public const ErrorCode WalletUnknownTypeError Field Value Type Description ErrorCode"
  },
  "api/Hyperledger.Indy.IndySDKModels.SignatureType.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.SignatureType.html",
    "title": "Class IndySDKModels.SignatureType | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.SignatureType TODO Inheritance System.Object IndySDKModels.SignatureType Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class SignatureType : Object Constructors SignatureType() Declaration public SignatureType() Fields CL TODO Declaration public static string CL Field Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IOException.html": {
    "href": "api/Hyperledger.Indy.IOException.html",
    "title": "Class IOException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IOException Exception indicating that an IO error occurred. Inheritance System.Object IndyException IOException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class IOException : IndyException"
  },
  "api/Hyperledger.Indy.LedgerApi.InvalidLedgerTransactionException.html": {
    "href": "api/Hyperledger.Indy.LedgerApi.InvalidLedgerTransactionException.html",
    "title": "Class InvalidLedgerTransactionException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class InvalidLedgerTransactionException Exception thrown when attempting to send an unknown or incomplete ledger message. Inheritance System.Object IndyException InvalidLedgerTransactionException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.LedgerApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class InvalidLedgerTransactionException : IndyException"
  },
  "api/Hyperledger.Indy.WalletApi.InvalidWalletException.html": {
    "href": "api/Hyperledger.Indy.WalletApi.InvalidWalletException.html",
    "title": "Class InvalidWalletException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class InvalidWalletException Exception thrown when an attempt is made to use a closed or invalid wallet. Inheritance System.Object IndyException InvalidWalletException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class InvalidWalletException : IndyException"
  },
  "api/Hyperledger.Indy.WalletApi.UnknownWalletTypeException.html": {
    "href": "api/Hyperledger.Indy.WalletApi.UnknownWalletTypeException.html",
    "title": "Class UnknownWalletTypeException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class UnknownWalletTypeException Exception thrown when attempting to open a wallet with a type that has not been registered. Inheritance System.Object IndyException UnknownWalletTypeException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class UnknownWalletTypeException : IndyException"
  },
  "api/Hyperledger.Indy.AnonCredsApi.AnoncredsNotIssuedException.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.AnoncredsNotIssuedException.html",
    "title": "Class AnoncredsNotIssuedException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class AnoncredsNotIssuedException Exception thrown when an anoncreds is not issued. Inheritance System.Object IndyException AnoncredsNotIssuedException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class AnoncredsNotIssuedException : IndyException"
  },
  "api/Hyperledger.Indy.IndySDKModels.KeyCorrectnessProof.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.KeyCorrectnessProof.html",
    "title": "Class IndySDKModels.KeyCorrectnessProof | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.KeyCorrectnessProof TODO Inheritance System.Object IndySDKModels.KeyCorrectnessProof Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class KeyCorrectnessProof : Object Constructors KeyCorrectnessProof() Declaration public KeyCorrectnessProof() Properties C TODO Declaration public string C { get; set; } Property Value Type Description System.String ClaimKeyValuePair TODO Declaration public Dictionary<string, string> ClaimKeyValuePair { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > XzCap TODO Declaration public string XzCap { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.ProofRequest.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.ProofRequest.html",
    "title": "Class IndySDKModels.ProofRequest | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.ProofRequest TODO Inheritance System.Object IndySDKModels.ProofRequest Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ProofRequest : Object Constructors ProofRequest() Declaration public ProofRequest() Properties RequestedAttrs TODO Declaration public Dictionary<string, object[]> RequestedAttrs { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.Object []> RequestedPredicates TODO Declaration public Dictionary<string, string> RequestedPredicates { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > SelfAttestedAttributes TODO Declaration public Dictionary<string, string> SelfAttestedAttributes { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String >"
  },
  "api/Hyperledger.Indy.IndySDKModels.SchemaKey.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.SchemaKey.html",
    "title": "Class IndySDKModels.SchemaKey | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.SchemaKey TODO Inheritance System.Object IndySDKModels.SchemaKey Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class SchemaKey : Object Constructors SchemaKey() Declaration public SchemaKey() Properties Did TODO Declaration public string Did { get; set; } Property Value Type Description System.String Name TODO Declaration public string Name { get; set; } Property Value Type Description System.String Version TODO Declaration public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.html",
    "title": "Class IndySDKModels | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels TODO Inheritance System.Object IndySDKModels Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class IndySDKModels : Object Constructors IndySDKModels() Declaration public IndySDKModels()"
  },
  "api/Hyperledger.Indy.LedgerApi.html": {
    "href": "api/Hyperledger.Indy.LedgerApi.html",
    "title": "Namespace Hyperledger.Indy.LedgerApi | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy.LedgerApi Classes InvalidLedgerTransactionException Exception thrown when attempting to send an unknown or incomplete ledger message. Ledger Provides methods for building messages suitable for submission to the ledger and methods for signing and submitting messages to the ledger. LedgerConsensusException Exception thrown when the no consensus was reached during a ledger operation. LedgerSecurityException Exception thrown when attempting to send a transaction without the necessary privileges."
  },
  "api/Hyperledger.Indy.IndySDKModels.CredentialSchemaBase.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.CredentialSchemaBase.html",
    "title": "Class IndySDKModels.CredentialSchemaBase | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.CredentialSchemaBase TODO Inheritance System.Object IndySDKModels.CredentialSchemaBase IndySDKModels.CredentialSchema IndySDKModels.SchemaProofRequest Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class CredentialSchemaBase : Object Constructors CredentialSchemaBase() Declaration public CredentialSchemaBase() Properties Name TODO Declaration public string Name { get; set; } Property Value Type Description System.String Version TODO Declaration public string Version { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.MultiSignature.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.MultiSignature.html",
    "title": "Class IndySDKModels.MultiSignature | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.MultiSignature TODO Inheritance System.Object IndySDKModels.MultiSignature Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class MultiSignature : Object Constructors MultiSignature() Declaration public MultiSignature() Properties Participants TODO Declaration public string[] Participants { get; set; } Property Value Type Description System.String [] Signature TODO Declaration public string Signature { get; set; } Property Value Type Description System.String Value TODO Declaration public IndySDKModels.Value Value { get; set; } Property Value Type Description IndySDKModels.Value"
  },
  "api/Hyperledger.Indy.IndySDKModels.Referent.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.Referent.html",
    "title": "Class IndySDKModels.Referent | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.Referent TODO Inheritance System.Object IndySDKModels.Referent Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class Referent : Object Constructors Referent() Declaration public Referent() Properties Attrs TODO Declaration public Dictionary<string, string> Attrs { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > ClaimUUID TODO Declaration public string ClaimUUID { get; set; } Property Value Type Description System.String IssuerDid TODO Declaration public string IssuerDid { get; set; } Property Value Type Description System.String RevocRegSeqNo TODO Declaration public object RevocRegSeqNo { get; set; } Property Value Type Description System.Object SchemaKey TODO Declaration public IndySDKModels.SchemaKey SchemaKey { get; set; } Property Value Type Description IndySDKModels.SchemaKey"
  },
  "api/Hyperledger.Indy.IndySDKModels.SchemaResult.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.SchemaResult.html",
    "title": "Class IndySDKModels.SchemaResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.SchemaResult TODO Inheritance System.Object IndySDKModels.SchemaResult Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class SchemaResult : Object Constructors SchemaResult() Declaration public SchemaResult() Properties CredentialSchema TODO Declaration public IndySDKModels.CredentialSchema CredentialSchema { get; set; } Property Value Type Description IndySDKModels.CredentialSchema Destination TODO Declaration public string Destination { get; set; } Property Value Type Description System.String SequenceNumber TODO Declaration public Nullable<int> SequenceNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 >"
  },
  "api/Hyperledger.Indy.AnonCredsApi.RevocationRegistryFullException.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.RevocationRegistryFullException.html",
    "title": "Class RevocationRegistryFullException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class RevocationRegistryFullException Exception thrown when attempting to use a full revocation registry. Inheritance System.Object IndyException RevocationRegistryFullException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class RevocationRegistryFullException : IndyException"
  },
  "api/Hyperledger.Indy.DidApi.Did.html": {
    "href": "api/Hyperledger.Indy.DidApi.Did.html",
    "title": "Class Did | Hyperledger Indy .NET Wrapper",
    "keywords": "Class Did Provides cryptographic functionality. Inheritance System.Object Did Namespace : Hyperledger.Indy.DidApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public static class Did : Object Methods AbbreviateVerkeyAsync(String, String) Retrieves abbreviated verkey if it is possible otherwise return full verkey. Declaration public static Task<string> AbbreviateVerkeyAsync(string did, string fullVerkey) Parameters Type Name Description System.String did Did. System.String fullVerkey Full verkey. Returns Type Description System.Threading.Tasks.Task < System.String > The verkey async. CreateAndStoreMyDidAsync(Wallet, String) Creates signing and encryption keys in specified wallet for a new DID owned by the caller. Declaration public static Task<CreateAndStoreMyDidResult> CreateAndStoreMyDidAsync(Wallet wallet, string didJson) Parameters Type Name Description Wallet wallet The wallet to store the DID in. System.String didJson The DID JSON. Returns Type Description System.Threading.Tasks.Task < CreateAndStoreMyDidResult > An asynchronous System.Threading.Tasks.Task<> that resolves to a CreateAndStoreMyDidResult when the operation completes. Remarks Saves the identity DID with keys in a wallet so that it can be used to sign and encrypt transactions. Control over the created DID is provided through the didJson parameter which accepts a JSON string with the following optional parameters: { \"did\": string, \"seed\": string, \"crypto_type\": string, \"cid\": bool } The did member specifies the DID of the new entry. If not provided and the cid member is false then the first 16 bits of the VerKey value generated will be used as a new DID. If not provided and the cid member is true then the full VerKey value will be used as a new DID. If the did member is provided then the keys will be replaced - this is normally used in the case of key rotation. The seed member specifies the seed to use when generating keys. If not provided then a random seed value will be created. The crypto_type member specifies the cryptographic algorithm used for generating keys. If not provided then ed25519 curve is used. note The only value currently supported for this member is 'ed25519'. The cid member indicates whether the DID should be used in creating the DID. If not provided then the value defaults to false. GetDidMetadataAsync(Wallet, String) Gets the metadata associated with the specified DID. Declaration public static Task<string> GetDidMetadataAsync(Wallet wallet, string did) Parameters Type Name Description Wallet wallet The wallet that contains the DID. System.String did The DID to get the metadata for. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a string containing the metadata associated with the DID. Exceptions Type Condition WalletValueNotFoundException Thrown if the wallet does not contain the specified did or the DID did not have any metadata. InvalidStructureException Thrown if the value provided in the did parameter is malformed. GetEndpointForDidAsync(Wallet, Pool, String) Gets the endpoint details for the specified DID. Declaration public static Task<EndpointForDidResult> GetEndpointForDidAsync(Wallet wallet, Pool pool, string did) Parameters Type Name Description Wallet wallet The wallet containing the DID. Pool pool The pool to resolve the endpoint data from if not present in the wallet. System.String did The DID to get the endpoint data for. Returns Type Description System.Threading.Tasks.Task < EndpointForDidResult > An asynchronous System.Threading.Tasks.Task<> that resolves to an EndpointForDidResult containing the endpoint information associated with the DID. Remarks If the did is present in the wallet and is considered \"fresh\" then the endpoint will be resolved from the wallet. If, on the other hand, the DID is not present in the wallet or is not fresh then the details will be resolved from the pool and will be cached in the wallet. GetMyDidWithMetaAsync(Wallet, String) Get info about My DID in format: DID, verkey, metadata Declaration public static Task<string> GetMyDidWithMetaAsync(Wallet wallet, string myDid) Parameters Type Name Description Wallet wallet Wallet. System.String myDid My did. Returns Type Description System.Threading.Tasks.Task < System.String > The my did with meta async. KeyForDidAsync(Pool, Wallet, String) Gets the verification key for the specified DID. Declaration public static Task<string> KeyForDidAsync(Pool pool, Wallet wallet, string did) Parameters Type Name Description Pool pool The pool to use for resolving the DID if it does not exist in the wallet . Wallet wallet The wallet to resolve the DID from. System.String did The DID to get the verification key for. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a string containing the verification key associated with the DID. Remarks If the provided wallet does not contain the verification key associated with the specified DID then an attempt will be made to look up the key from the provided pool . If resolved from the pool then the DID and key will be automatically cached in the wallet . note The CreateAndStoreMyDidAsync(Wallet, String) and CreateKeyAsync(Wallet, String) methods both create similar wallet records so the returned verification key in all generic crypto and messaging functions. Exceptions Type Condition WalletValueNotFoundException Thrown if the DID could not be resolved from the wallet and pool . KeyForLocalDidAsync(Wallet, String) Gets the verification key for the specified DID. Declaration public static Task<string> KeyForLocalDidAsync(Wallet wallet, string did) Parameters Type Name Description Wallet wallet The wallet to resolve the DID from. System.String did The DID to get the verification key for. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a string containing the verification key associated with the DID. Remarks This method will obtain the verification key associated with the specified did from the provided wallet but will not attempt to retrieve the key from the ledger if not present in the wallet, nor will it perform any freshness check against the ledger to determine if the key is up-to-date. To ensure that the key is fresh use the KeyForDidAsync(Pool, Wallet, String) method instead. note The CreateAndStoreMyDidAsync(Wallet, String) and CreateKeyAsync(Wallet, String) methods both create similar wallet records so the returned verification key in all generic crypto and messaging functions. Exceptions Type Condition WalletValueNotFoundException Thrown if the DID could not be resolved from the wallet . ListMyDidsWithMetaAsync(Wallet) Lists created DIDs with metadata as JSON array with each DID in format: DID, verkey, metadata Declaration public static Task<string> ListMyDidsWithMetaAsync(Wallet wallet) Parameters Type Name Description Wallet wallet Wallet. Returns Type Description System.Threading.Tasks.Task < System.String > The my dids with meta async. ReplaceKeysApplyAsync(Wallet, String) Applies temporary signing and encryption keys as main in the specified wallet for an existing DID owned by the caller Declaration public static Task ReplaceKeysApplyAsync(Wallet wallet, string did) Parameters Type Name Description Wallet wallet The wallet the DID is stored in. System.String did The did to replace the keys for. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that with no return value the completes when the operation completes. ReplaceKeysStartAsync(Wallet, String, String) Generates new signing and encryption keys in the specified wallet for an existing DID owned by the caller Declaration public static Task<string> ReplaceKeysStartAsync(Wallet wallet, string did, string identityJson) Parameters Type Name Description Wallet wallet The wallet the DID is stored in. System.String did The did to replace the keys for. System.String identityJson The identity information as JSON. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a string containing the new verification key when the operation completes. Remarks The developer has some control over the generation of the new keys through the value passed to the identityJson parameter. This parameter expects a valid JSON string with the following optional members: { \"seed\": string, \"crypto_type\": string } The seed member controls the seed that will be used to generate they keys. If not provided a random one will be created. The crypto_type member specifies the type of cryptographic algorithm will be used to generate they keys. If not provided then ed22519 curve will be used. note The only value currently supported for this member is 'ed25519'. SetDidMetadataAsync(Wallet, String, String) Sets metadata for the specified DID. Declaration public static Task SetDidMetadataAsync(Wallet wallet, string did, string metadata) Parameters Type Name Description Wallet wallet The wallet containing the DID. System.String did The DID to set the metadata on. System.String metadata The metadata to store. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation completes. Remarks Any existing metadata stored for the DID will be replaced. Exceptions Type Condition WalletValueNotFoundException Thrown if the wallet does not contain the specified did . InvalidStructureException Thrown if the value provided to the did parameter is malformed. SetEndpointForDidAsync(Wallet, String, String, String) Sets the endpoint details for the specified DID. Declaration public static Task SetEndpointForDidAsync(Wallet wallet, string did, string address, string transportKey) Parameters Type Name Description Wallet wallet The wallet containing the DID. System.String did The DID to set the endpoint details on. System.String address The address of the endpoint. System.String transportKey The transport key. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation completes. Exceptions Type Condition InvalidStructureException Thrown if the did or transportKey values are malformed. StoreTheirDidAsync(Wallet, String) Stores a remote party's DID for a pairwise connection in the specified wallet. Declaration public static Task StoreTheirDidAsync(Wallet wallet, string identityJson) Parameters Type Name Description Wallet wallet The wallet to store the DID in. System.String identityJson The identity JSON. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that with no return value the completes when the operation completes. Remarks The DID and optional associated parameters must be provided in the identityJson parameter as a JSON string: { \"did\": string, \"verkey\": string, \"crypto_type\": string } The did member specifies the DID to store. This value is required. The verkey member specifies the verification key and is optional. The crypto_type member specifies the type of cryptographic algorithm will be used to generate they keys. If not provided then ed22519 curve will be used. note The only value currently supported for this member is 'ed25519'."
  },
  "api/Hyperledger.Indy.IndySDKModels.ClaimDefinitionResult.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.ClaimDefinitionResult.html",
    "title": "Class IndySDKModels.ClaimDefinitionResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.ClaimDefinitionResult TODO Inheritance System.Object IndySDKModels.ClaimDefinitionResult Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ClaimDefinitionResult : Object Constructors ClaimDefinitionResult() Declaration public ClaimDefinitionResult() Properties Data TODO Declaration public IndySDKModels.Data Data { get; set; } Property Value Type Description IndySDKModels.Data Identifier TODO Declaration public string Identifier { get; set; } Property Value Type Description System.String Origin TODO Declaration public string Origin { get; set; } Property Value Type Description System.String Ref TODO Declaration public int Ref { get; set; } Property Value Type Description System.Int32 ReqId TODO Declaration public Nullable<long> ReqId { get; set; } Property Value Type Description System.Nullable < System.Int64 > SeqNo TODO Declaration public Nullable<long> SeqNo { get; set; } Property Value Type Description System.Nullable < System.Int64 > SignatureType TODO Declaration public string SignatureType { get; set; } Property Value Type Description System.String StateProof TODO Declaration public IndySDKModels.StateProof StateProof { get; set; } Property Value Type Description IndySDKModels.StateProof TxnTime TODO Declaration public Nullable<long> TxnTime { get; set; } Property Value Type Description System.Nullable < System.Int64 > Type TODO Declaration public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.CredentialSchemaResult.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.CredentialSchemaResult.html",
    "title": "Class IndySDKModels.CredentialSchemaResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.CredentialSchemaResult TODO Inheritance System.Object IndySDKModels.CredentialSchemaResult Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class CredentialSchemaResult : Object Constructors CredentialSchemaResult() Declaration public CredentialSchemaResult() Properties CredentialSchema TODO Declaration public IndySDKModels.CredentialSchema CredentialSchema { get; set; } Property Value Type Description IndySDKModels.CredentialSchema Destination TODO Declaration public string Destination { get; set; } Property Value Type Description System.String Identifier TODO Declaration public string Identifier { get; set; } Property Value Type Description System.String RequestId TODO Declaration public long RequestId { get; set; } Property Value Type Description System.Int64 SequenceNumber TODO Declaration public Nullable<int> SequenceNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 > StateProof TODO Declaration public IndySDKModels.StateProof StateProof { get; set; } Property Value Type Description IndySDKModels.StateProof TransactionTime TODO Declaration public int TransactionTime { get; set; } Property Value Type Description System.Int32 Type TODO Declaration public string Type { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.AnonCredsApi.IssuerCreateClaimResult.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.IssuerCreateClaimResult.html",
    "title": "Class IssuerCreateClaimResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IssuerCreateClaimResult Result of an issuer creating a claim. Inheritance System.Object IssuerCreateClaimResult Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public sealed class IssuerCreateClaimResult : Object Constructors IssuerCreateClaimResult(String, String) Initializes a new IssuerCreateClaimResult. Declaration public IssuerCreateClaimResult(string revocRegUpdateJson, string claimJson) Parameters Type Name Description System.String revocRegUpdateJson The revocation registry update JSON. System.String claimJson The claim JSON. Properties ClaimJson Gets the claim JSON. Declaration public string ClaimJson { get; } Property Value Type Description System.String RevocRegUpdateJson Gets the revocation registry update JSON. Declaration public string RevocRegUpdateJson { get; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.ConnectionResponse.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.ConnectionResponse.html",
    "title": "Class IndySDKModels.ConnectionResponse | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.ConnectionResponse TODO Inheritance System.Object IndySDKModels.ConnectionResponse Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ConnectionResponse : Object Constructors ConnectionResponse() Declaration public ConnectionResponse() Properties Did TODO Declaration public string Did { get; set; } Property Value Type Description System.String Nonce TODO Declaration public long Nonce { get; set; } Property Value Type Description System.Int64 VerKey TODO Declaration public string VerKey { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.GenesisTransactionPath.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.GenesisTransactionPath.html",
    "title": "Class IndySDKModels.GenesisTransactionPath | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.GenesisTransactionPath TODO Inheritance System.Object IndySDKModels.GenesisTransactionPath Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class GenesisTransactionPath : Object Constructors GenesisTransactionPath() Declaration public GenesisTransactionPath() Properties GenesisTransaction TODO Declaration public string GenesisTransaction { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.ProverClaims.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.ProverClaims.html",
    "title": "Class IndySDKModels.ProverClaims | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.ProverClaims TODO Inheritance System.Object IndySDKModels.ProverClaims Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ProverClaims : Object Constructors ProverClaims() Declaration public ProverClaims() Properties Attrs TODO Declaration public Dictionary<string, string> Attrs { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > IssuerDid TODO Declaration public string IssuerDid { get; set; } Property Value Type Description System.String Referent TODO Declaration public string Referent { get; set; } Property Value Type Description System.String RevocRegSequenceNumber TODO Declaration public Nullable<int> RevocRegSequenceNumber { get; set; } Property Value Type Description System.Nullable < System.Int32 > SchemaKey TODO Declaration public IndySDKModels.SchemaKey SchemaKey { get; set; } Property Value Type Description IndySDKModels.SchemaKey"
  },
  "api/Hyperledger.Indy.IndySDKModels.SchemaProofRequest.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.SchemaProofRequest.html",
    "title": "Class IndySDKModels.SchemaProofRequest | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.SchemaProofRequest TODO Inheritance System.Object IndySDKModels.CredentialSchemaBase IndySDKModels.SchemaProofRequest Inherited Members IndySDKModels.CredentialSchemaBase.Name IndySDKModels.CredentialSchemaBase.Version Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class SchemaProofRequest : IndySDKModels.CredentialSchemaBase Constructors SchemaProofRequest() Declaration public SchemaProofRequest() Properties Nonce TODO Declaration public string Nonce { get; set; } Property Value Type Description System.String RequestedAttributes TODO Declaration public Dictionary<string, IndySDKModels.RequestedSchemaAttributes> RequestedAttributes { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IndySDKModels.RequestedSchemaAttributes > RequestedPredicates TODO Declaration public Dictionary<string, IndySDKModels.PredicateReferent> RequestedPredicates { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IndySDKModels.PredicateReferent >"
  },
  "api/Hyperledger.Indy.InvalidParameterException.html": {
    "href": "api/Hyperledger.Indy.InvalidParameterException.html",
    "title": "Class InvalidParameterException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class InvalidParameterException Exception indicating that one of the parameters provided to an SDK call contained a valid that was considered invalid. Inheritance System.Object IndyException InvalidParameterException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class InvalidParameterException : IndyException Properties ParameterIndex Gets the index of the parameter that contained the invalid value. Declaration public int ParameterIndex { get; } Property Value Type Description System.Int32"
  },
  "api/Hyperledger.Indy.InvalidStateException.html": {
    "href": "api/Hyperledger.Indy.InvalidStateException.html",
    "title": "Class InvalidStateException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class InvalidStateException Exception indicating that the SDK library experienced an unexpected internal error. Inheritance System.Object IndyException InvalidStateException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class InvalidStateException : IndyException"
  },
  "api/Hyperledger.Indy.PoolApi.PoolLedgerTerminatedException.html": {
    "href": "api/Hyperledger.Indy.PoolApi.PoolLedgerTerminatedException.html",
    "title": "Class PoolLedgerTerminatedException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class PoolLedgerTerminatedException Exception thrown when the pool ledger was terminated. Inheritance System.Object IndyException PoolLedgerTerminatedException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.PoolApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class PoolLedgerTerminatedException : IndyException"
  },
  "api/Hyperledger.Indy.PoolApi.html": {
    "href": "api/Hyperledger.Indy.PoolApi.html",
    "title": "Namespace Hyperledger.Indy.PoolApi | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy.PoolApi Classes InvalidPoolException Exception thrown when attempting to use a pool that has been closed or is invalid. Pool Represents a connection to a pool of ledger nodes and provides static methods for managing connections to pools. PoolConfigNotCreatedException Exception thrown when attempting to open pool which does not yet have a created configuration. PoolLedgerConfigExistsException Exception thrown when attempting to create a pool ledger config with same name as an existing pool ledger config. PoolLedgerTerminatedException Exception thrown when the pool ledger was terminated."
  },
  "api/Hyperledger.Indy.html": {
    "href": "api/Hyperledger.Indy.html",
    "title": "Namespace Hyperledger.Indy | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy Classes ErrorCode Error codes IndyException Exception indicating a problem originating from the Indy SDK. IndySDKModels TODO IndySDKModels.ClaimDefinitionResult TODO IndySDKModels.ClaimOfferResponse TODO IndySDKModels.ClaimsForProofResponse TODO IndySDKModels.ConnectionRequest TODO IndySDKModels.ConnectionResponse TODO IndySDKModels.CredentialSchema TODO IndySDKModels.CredentialSchemaBase TODO IndySDKModels.CredentialSchemaResult TODO IndySDKModels.Data TODO IndySDKModels.DidEntity TODO IndySDKModels.DidInfo TODO IndySDKModels.GenesisTransactionPath TODO IndySDKModels.KeyCorrectnessProof TODO IndySDKModels.LedgerResult<TResult> TODO IndySDKModels.MultiSignature TODO IndySDKModels.OpenPoolConfiguration TODO IndySDKModels.PredicateReferent TODO IndySDKModels.Primary TODO IndySDKModels.ProofRequest TODO IndySDKModels.ProverClaims TODO IndySDKModels.Referent TODO IndySDKModels.RequestedSchemaAttributes TODO IndySDKModels.Restriction TODO IndySDKModels.RoleType TODO IndySDKModels.SchemaKey TODO IndySDKModels.SchemaProofRequest TODO IndySDKModels.SchemaResult TODO IndySDKModels.SignatureType TODO IndySDKModels.StateProof TODO IndySDKModels.Value TODO InvalidParameterException Exception indicating that one of the parameters provided to an SDK call contained a valid that was considered invalid. InvalidStateException Exception indicating that the SDK library experienced an unexpected internal error. InvalidStructureException Exception indicating that a value being processed was not considered a valid value. IOException Exception indicating that an IO error occurred."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Namespaces | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespaces The Indy SDK wrapper for .NET is separated into a series of namespaces that contain types for performing specific types of interactions. The list of these namesaces and their function can be found below and the you can access the types can be accessed by selecting the namespace from the sidebar. Hyperledger.Indy General types that relate to the .NET wrapper as a whole. This includes exception types that are common to all interactions. See the Hyperledger.Indy Namespace topic for details. Hyperledger.Indy.AgentApi Types for preparing and parsing messages for secure delivery between Indy agents. See the <xref:Hyperledger.Indy.AgentApi> Namespace topic for details. Hyperledger.Indy.AnonCredsApi Types for generating and managing anonymous credentials including claims, claim schema, proofs, etc. See the Hyperledger.Indy.AnonCredsApi Namespace topic for details. Hyperledger.Indy.CryptoApi Types for performing common pure cryptographic functions that are not specific to the <xref:Hyperledger.Indy.SignusApi.Signus> functionality such as generating key-pairs, signing, verifying and anonymous encryption. See the Hyperledger.Indy.CryptoApi Namespace topic for details. Hyperledger.Indy.LedgerApi Types for generating transaction messages as well as signing and sending them to a ledger pool. See the Hyperledger.Indy.LedgerApi Namespace topic for details. Hyperledger.Indy.PairwiseApi Types for managing pairwise relationships between DIDs. See the Hyperledger.Indy.PairwiseApi Namespace topic for details. Hyperledger.Indy.PoolApi Types for managing connections to node pools that host ledgers. See the Hyperledger.Indy.PoolApi Namespace topic for details. Hyperledger.Indy.SignusApi Types for creating and managing DIDs, key management, encryption, decryption, digital signatures, etc. See the <xref:Hyperledger.Indy.SignusApi> Namespace topic for details. Hyperledger.Indy.WalletApi Types for managing wallets which can contain DIDs, their associated keys and other key/value data. See the Hyperledger.Indy.WalletApi Namespace topic for details."
  },
  "index.html": {
    "href": "index.html",
    "title": ".NET API for the Hyperledger Indy SDK | Hyperledger Indy .NET Wrapper",
    "keywords": ".NET API for the Hyperledger Indy SDK The .NET API for the Hyperledger Indy SDK can be used with any flavor of .NET that conforms to the .NET Standard 1.0 and above including but not limited to the .NET Framework v4.5 and .NET Core 1.0 and can be used on any platform with .NET support. The .NET assembly is a wrapper for the C-callable Indy SDK which must be installed separately in an appropriate location (e.g. the DLL search path in Windows). The SDK provides features for managing a self sovereign identity including communication between agents, storing and managing keys and data, generation of claims, claim requests, proofs and other anonymous credentials, cryptographic functionality and generation of messages for interacting with an Indy node pool such as the one hosting the Sovrin ledger. For more information on Hyperledger Indy see the Hyperledger website The source code for the Hyperledger Indy SDK, including this .NET wrapper can be found here For more information on Sovrin see the Sovrin website To dive in and start coding please proceed to the API Documentation ."
  },
  "api/Hyperledger.Indy.IndySDKModels.Primary.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.Primary.html",
    "title": "Class IndySDKModels.Primary | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.Primary TODO Inheritance System.Object IndySDKModels.Primary Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class Primary : Object Constructors Primary() Declaration public Primary() Properties N TODO Declaration public string N { get; set; } Property Value Type Description System.String R TODO Declaration public Dictionary<string, string> R { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String > Rctxt TODO Declaration public string Rctxt { get; set; } Property Value Type Description System.String Rms TODO Declaration public string Rms { get; set; } Property Value Type Description System.String S TODO Declaration public string S { get; set; } Property Value Type Description System.String Z TODO Declaration public string Z { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.RoleType.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.RoleType.html",
    "title": "Class IndySDKModels.RoleType | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.RoleType TODO Inheritance System.Object IndySDKModels.RoleType Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class RoleType : Object Constructors RoleType() Declaration public RoleType() Fields STEWARD TODO Declaration public static string STEWARD Field Value Type Description System.String TRUST_ANCHOR TODO Declaration public static string TRUST_ANCHOR Field Value Type Description System.String TRUSTEE TODO Declaration public static string TRUSTEE Field Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.StateProof.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.StateProof.html",
    "title": "Class IndySDKModels.StateProof | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.StateProof TODO Inheritance System.Object IndySDKModels.StateProof Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class StateProof : Object Constructors StateProof() Declaration public StateProof() Properties MultiSignature TODO Declaration public IndySDKModels.MultiSignature MultiSignature { get; set; } Property Value Type Description IndySDKModels.MultiSignature ProofNodes TODO Declaration public string ProofNodes { get; set; } Property Value Type Description System.String RootHash TODO Declaration public string RootHash { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.LedgerApi.Ledger.html": {
    "href": "api/Hyperledger.Indy.LedgerApi.Ledger.html",
    "title": "Class Ledger | Hyperledger Indy .NET Wrapper",
    "keywords": "Class Ledger Provides methods for building messages suitable for submission to the ledger and methods for signing and submitting messages to the ledger. Inheritance System.Object Ledger Namespace : Hyperledger.Indy.LedgerApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public static class Ledger : Object Remarks This class provides methods for generating messages for submission to the ledger; each of these methods is prefixed with the word 'Build' and returns a JSON message which must be signed and submitted to a node pool. These messages can be submitted to the ledger using the SignAndSubmitRequestAsync(Pool, Wallet, String, String) or can be signed first using the SignRequestAsync(Wallet, String, String) method then submitted later using the SubmitRequestAsync(Pool, String) method. Fields NYM_ROLE_STEWARD The 'Steward' NYM role. Declaration public const string NYM_ROLE_STEWARD = \"STEWARD\" Field Value Type Description System.String NYM_ROLE_TRUST_ANCHOR The 'Trust Anchor' NYM role. Declaration public const string NYM_ROLE_TRUST_ANCHOR = \"TRUST_ANCHOR\" Field Value Type Description System.String NYM_ROLE_TRUSTEE The 'Trustee' NYM role. Declaration public const string NYM_ROLE_TRUSTEE = \"TRUSTEE\" Field Value Type Description System.String Methods BuildAttribRequestAsync(String, String, String, String, String) Builds a ledger request for storing an ATTRIB. Declaration public static Task<string> BuildAttribRequestAsync(string submitterDid, string targetDid, string hash, string raw, string enc) Parameters Type Name Description System.String submitterDid The DID of the party that will submit the request to the ledger. System.String targetDid The DID the ATTRIB will belong to. System.String hash The hash of the ATTRIB data. System.String raw The raw JSON attribute data. System.String enc The encrypted attribute data. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for setting an attribute on the ledger. The submitterDid , targetDid are mandatory and any one of the hash , raw or enc parameters must also be provided, depending on what type of data should be stored. BuildClaimDefTxnAsync(String, Int32, String, String) Builds a CLAIM_DEF ledger request. Declaration public static Task<string> BuildClaimDefTxnAsync(string submitterDid, int xref, string signatureType, string data) Parameters Type Name Description System.String submitterDid The DID of the party that will submit the request. System.Int32 xref The sequence number of schema. System.String signatureType The signature type. System.String data A JSON string with the components of a key. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for storing a claim definition on a ledger. A claim definition is published by a claim issuer (e.g. a bank, passport office etc). It references the relevant schema, the issuer that published the claim definition, and the signature types used. The data parameter expects a JSON string with the components of a key. For example: { \"primary\":{ \"n\":\"1\", \"s\":\"2\", \"rms\":\"3\", \"r\":{ \"name\":\"1\" }, \"rctxt\":\"1\", \"z\":\"1\" } } TODO: Better example required. note The signatureType parameter only accepts the value 'CL' at present. BuildGetAttribRequestAsync(String, String, String, String, String) Builds a GET_ATTRIB ledger request. Declaration public static Task<string> BuildGetAttribRequestAsync(string submitterDid, string targetDid, string raw, string hash, string enc) Parameters Type Name Description System.String submitterDid The DID of the submitter. System.String targetDid The target DID. System.String raw The name of the attribute to get. System.String hash System.String enc Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for requesting an attribute from the ledger. BuildGetClaimDefTxnAsync(String, Int32, String, String) Builds a GET_CLAIM_DEF ledger request. Declaration public static Task<string> BuildGetClaimDefTxnAsync(string submitterDid, int xref, string signatureType, string origin) Parameters Type Name Description System.String submitterDid The DID of the party that will submit the request. System.Int32 xref The sequence number of the schema the claim definition targets. System.String signatureType The type of signature used in the claim definition. System.String origin The DID of the issuer of the claim definition. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for getting a claim definition from a ledger. BuildGetDdoRequestAsync(String, String) Builds a ledger request to get a DDO. Declaration public static Task<string> BuildGetDdoRequestAsync(string submitterDid, string targetDid) Parameters Type Name Description System.String submitterDid The DID of the party who will submit the request to the ledger. System.String targetDid The DID of the DDO to get from the ledger. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks This message builds a request message that is suitable for requesting a DDO from the ledger. The resulting message can be submitted to the ledger using the SignAndSubmitRequestAsync(Pool, Wallet, String, String) method or can be signed first using the SignRequestAsync(Wallet, String, String) method then submitted later using the SubmitRequestAsync(Pool, String) method. BuildGetNymRequestAsync(String, String) Builds a GET_NYM ledger request. Declaration public static Task<string> BuildGetNymRequestAsync(string submitterDid, string targetDid) Parameters Type Name Description System.String submitterDid The DID of the party submitting the request. System.String targetDid The target DID. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for requesting a NYM from the ledger. BuildGetSchemaRequestAsync(String, String, String) Builds a GET_SCHEMA ledger request. Declaration public static Task<string> BuildGetSchemaRequestAsync(string submitterDid, string dest, string data) Parameters Type Name Description System.String submitterDid The DID of the party that will submit the request. System.String dest The DID of the destination. System.String data A JSON string specifying what schema to get. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for requesting a schema from a ledger. The data parameter must contain a JSON string with the members \"name\", and \"version\" specifying the schema to get. For example the following JSON describes a request for a schema with the name \"access\" that is version 1.0: { \"name\":\"access\", \"version\":\"1.0\" } BuildGetTxnRequestAsync(String, Int32) Builds a GET_TXN request Declaration public static Task<string> BuildGetTxnRequestAsync(string submitterDid, int data) Parameters Type Name Description System.String submitterDid The DID of the submitter. System.Int32 data seq_no of transaction in ledger Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. BuildNodeRequestAsync(String, String, String) Builds a NODE ledger request. Declaration public static Task<string> BuildNodeRequestAsync(string submitterDid, string targetDid, string data) Parameters Type Name Description System.String submitterDid The DID of the submitter. System.String targetDid The target DID. System.String data id of a target NYM record Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. BuildNymRequestAsync(String, String, String, String, String) Builds a ledger request to store a NYM. Declaration public static Task<string> BuildNymRequestAsync(string submitterDid, string targetDid, string verKey, string alias, string role) Parameters Type Name Description System.String submitterDid The DID of the party who will submit the request to the ledger. System.String targetDid The DID the NYM belongs to. System.String verKey The verification key for the NYM. System.String alias The alias for the NYM. System.String role The role of the NYM. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for storing a NYM for the targetDid on the ledger. Only the submitterDid and targetDid parameters are required, however the other parameters provide greater control over the process. Normally the targetDid and verKey parameters would be from values generated by a prior call to CreateAndStoreMyDidAsync(Wallet, String) . The role parameter dictates what permissions the NYM will have - valid values are 'STEWARD' and 'TRUSTEE' and 'TRUST_ANCHOR'. BuildPoolConfigRequestAsync(String, Boolean, Boolean) Builds a POOL_CONFIG request. Declaration public static Task<string> BuildPoolConfigRequestAsync(string submitterDid, bool writes, bool force) Parameters Type Name Description System.String submitterDid Id of Identity stored in secured Wallet. System.Boolean writes If set to true writes. System.Boolean force If set to true force. Returns Type Description System.Threading.Tasks.Task < System.String > Request result as json. BuildPoolUpgradeRequestAsync(String, String, String, String, String, Int32, String, String, Boolean, Boolean) Builds a POOL_UPGRADE request. Declaration public static Task<string> BuildPoolUpgradeRequestAsync(string submitterDid, string name, string version, string action, string sha256, int timeout, string schedule, string justification, bool reinstall, bool force) Parameters Type Name Description System.String submitterDid Submitter did. System.String name Name. System.String version Version. System.String action Either start or cancel System.String sha256 Sha256. System.Int32 timeout Timeout. System.String schedule Schedule. System.String justification Justification. System.Boolean reinstall If set to true reinstall. System.Boolean force If set to true force. Returns Type Description System.Threading.Tasks.Task < System.String > Request result as json. BuildSchemaRequestAsync(String, String) Builds a SCHEMA ledger request to store a schema. Declaration public static Task<string> BuildSchemaRequestAsync(string submitterDid, string data) Parameters Type Name Description System.String submitterDid The DID of the submitter. System.String data The JSON schema. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a System.String containing the request JSON. Remarks Builds a request message that is suitable for storing a schema on a ledger. Schema specify the data types and formats which are used to make up claims. The data parameter must contain a JSON string with the members \"name\", \"version\" and \"attr_names\" that define the schema. For example the following JSON describes a schema with the name \"access\" that is version 1.0 of the schema and specifies the attributes \"ip\", \"port\", and \"keys\": { \"name\":\"access\", \"version\":\"1.0\", \"attr_names\":[\"ip\",\"port\",\"keys\"] } SignAndSubmitRequestAsync(Pool, Wallet, String, String) Signs and submits a request to the validator pool. Declaration public static Task<string> SignAndSubmitRequestAsync(Pool pool, Wallet wallet, string submitterDid, string requestJson) Parameters Type Name Description Pool pool The validator pool to submit the request to. Wallet wallet The wallet containing the submitter keys to sign the request with. System.String submitterDid The DID of the submitter identity. System.String requestJson The request JSON to sign and submit. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a JSON System.String containing the result of submission when the operation completes. Remarks This method adds information associated with the submitter specified by the submitterDid to the JSON provided in the requestJson parameter then signs it with the submitter's signing key from the provided wallet and sends the signed request message to the specified validator pool . SignRequestAsync(Wallet, String, String) Signs a request message. Declaration public static Task<string> SignRequestAsync(Wallet wallet, string submitterDid, string requestJson) Parameters Type Name Description Wallet wallet The wallet to use for signing. System.String submitterDid The DID of the submitter identity in the provided wallet. System.String requestJson The request JSON to sign. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous task that resolves to a System.String containing the signed message. Remarks This method adds information associated with the submitter specified by the submitterDid to the JSON provided in the requestJson parameter then signs it with the submitter's signing key from the provided wallet. SubmitRequestAsync(Pool, String) Submits a request to the ledger. Declaration public static Task<string> SubmitRequestAsync(Pool pool, string requestJson) Parameters Type Name Description Pool pool The validator pool to submit the request to. System.String requestJson The request to submit. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a JSON System.String containing the results when the operation completes. Remarks This method publishes a message to the validator pool specified in the pool parameter as-is and assumes that the message was previously prepared for submission. Requests can be signed prior to using this call to the SignRequestAsync(Wallet, String, String) method, or messages can be both signed and submitted using the SignAndSubmitRequestAsync(Pool, Wallet, String, String) method."
  },
  "api/Hyperledger.Indy.LedgerApi.LedgerConsensusException.html": {
    "href": "api/Hyperledger.Indy.LedgerApi.LedgerConsensusException.html",
    "title": "Class LedgerConsensusException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class LedgerConsensusException Exception thrown when the no consensus was reached during a ledger operation. Inheritance System.Object IndyException LedgerConsensusException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.LedgerApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class LedgerConsensusException : IndyException"
  },
  "api/Hyperledger.Indy.LedgerApi.LedgerSecurityException.html": {
    "href": "api/Hyperledger.Indy.LedgerApi.LedgerSecurityException.html",
    "title": "Class LedgerSecurityException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class LedgerSecurityException Exception thrown when attempting to send a transaction without the necessary privileges. Inheritance System.Object IndyException LedgerSecurityException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.LedgerApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class LedgerSecurityException : IndyException"
  },
  "api/Hyperledger.Indy.WalletApi.DuplicateWalletTypeException.html": {
    "href": "api/Hyperledger.Indy.WalletApi.DuplicateWalletTypeException.html",
    "title": "Class DuplicateWalletTypeException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class DuplicateWalletTypeException Exception thrown when registering a wallet type that has already been registered. Inheritance System.Object IndyException DuplicateWalletTypeException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class DuplicateWalletTypeException : IndyException"
  },
  "api/Hyperledger.Indy.WalletApi.ICustomWallet.html": {
    "href": "api/Hyperledger.Indy.WalletApi.ICustomWallet.html",
    "title": "Interface ICustomWallet | Hyperledger Indy .NET Wrapper",
    "keywords": "Interface ICustomWallet Features all custom wallets must implement. Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public interface ICustomWallet Methods Get(String, out String) Allows an implementer to get a value from the wallet. Declaration ErrorCode Get(string key, out string value) Parameters Type Name Description System.String key The key of the value to get. System.String value The value obtained from the wallet. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation. Remarks If the key does not exist the method should return WalletNotFoundError . GetNotExpired(String, out String) Allows an implementer to get a value from the wallet if it has not expired. Declaration ErrorCode GetNotExpired(string key, out string value) Parameters Type Name Description System.String key The key of the value to get. System.String value The value obtained from the wallet. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation. Remarks If the key does not exist or the record associated with the key has expired then the method should return WalletNotFoundError . List(String, out String) Allows an implementer to get a list of values from the wallet that match a key prefix. Declaration ErrorCode List(string keyPrefix, out string valuesJson) Parameters Type Name Description System.String keyPrefix The key prefix for the values requested. System.String valuesJson The JSON string containing the values associated with the key prefix. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation. Remarks The method should return a JSON string that conforms to the following format: { \"values\":[ {\"key\":\"key_1\", \"value\":\"value_1\"}, ... ] } If no values matching the keyPrefix parameter are found the values array in the JSON should be empty. Set(String, String) Allows an implementer to set a value in the wallet. Declaration ErrorCode Set(string key, string value) Parameters Type Name Description System.String key The key of the value to set. System.String value The value to set. Returns Type Description ErrorCode An ErrorCode value indicating the outcome of the operation."
  },
  "api/Hyperledger.Indy.AnonCredsApi.ClaimRevokedException.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.ClaimRevokedException.html",
    "title": "Class ClaimRevokedException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class ClaimRevokedException Exception thrown when a claim has been revoked. Inheritance System.Object IndyException ClaimRevokedException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ClaimRevokedException : IndyException"
  },
  "api/Hyperledger.Indy.AnonCredsApi.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.html",
    "title": "Namespace Hyperledger.Indy.AnonCredsApi | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy.AnonCredsApi Classes AnonCreds Provides methods for managing anonymous credentials. AnoncredsAccumulatorFullException Exception thrown when an anoncreds accumulator is full. AnoncredsNotIssuedException Exception thrown when an anoncreds is not issued. ClaimRevokedException Exception thrown when a claim has been revoked. DuplicateMasterSecretNameException Exception thrown when an attempt to create a master-secret with the same name as an existing master-secret. InvalidUserRevocIndexException Exception thrown when an invalid user revocation registry index is used. IssuerCreateClaimResult Result of an issuer creating a claim. ProofRejectedException Exception thrown when a proof has been rejected. RevocationRegistryFullException Exception thrown when attempting to use a full revocation registry."
  },
  "api/Hyperledger.Indy.DidApi.html": {
    "href": "api/Hyperledger.Indy.DidApi.html",
    "title": "Namespace Hyperledger.Indy.DidApi | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy.DidApi Classes CreateAndStoreMyDidResult Result of creating and storing my DID. Did Provides cryptographic functionality. EncryptResult The result of encryption. EndpointForDidResult Result of getting the endpoint for a DID. UnknownCryptoException Exception thrown when an unknown crypto format is used for DID entity keys."
  },
  "api/Hyperledger.Indy.IndySDKModels.ConnectionRequest.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.ConnectionRequest.html",
    "title": "Class IndySDKModels.ConnectionRequest | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.ConnectionRequest TODO Inheritance System.Object IndySDKModels.ConnectionRequest Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ConnectionRequest : Object Constructors ConnectionRequest() Declaration public ConnectionRequest() Properties Did TODO Declaration public string Did { get; set; } Property Value Type Description System.String Nonce TODO Declaration public long Nonce { get; set; } Property Value Type Description System.Int64"
  },
  "api/Hyperledger.Indy.IndySDKModels.DidInfo.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.DidInfo.html",
    "title": "Class IndySDKModels.DidInfo | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.DidInfo TODO Inheritance System.Object IndySDKModels.DidInfo Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class DidInfo : Object Constructors DidInfo() Declaration public DidInfo() Properties Cid TODO Declaration public bool Cid { get; set; } Property Value Type Description System.Boolean CryptoType TODO Declaration public string CryptoType { get; set; } Property Value Type Description System.String Did TODO Declaration public string Did { get; set; } Property Value Type Description System.String Seed TODO Declaration public string Seed { get; set; } Property Value Type Description System.String VerKey TODO Declaration public string VerKey { get; set; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.OpenPoolConfiguration.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.OpenPoolConfiguration.html",
    "title": "Class IndySDKModels.OpenPoolConfiguration | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.OpenPoolConfiguration TODO Inheritance System.Object IndySDKModels.OpenPoolConfiguration Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class OpenPoolConfiguration : Object Constructors OpenPoolConfiguration() Declaration public OpenPoolConfiguration() Properties AutoRefreshTime TODO Declaration public int AutoRefreshTime { get; set; } Property Value Type Description System.Int32 NetworkTimeout TODO Declaration public int NetworkTimeout { get; set; } Property Value Type Description System.Int32 RefreshOnOpen TODO Declaration public bool RefreshOnOpen { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Hyperledger.Indy.IndySDKModels.RequestedSchemaAttributes.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.RequestedSchemaAttributes.html",
    "title": "Class IndySDKModels.RequestedSchemaAttributes | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.RequestedSchemaAttributes TODO Inheritance System.Object IndySDKModels.RequestedSchemaAttributes Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class RequestedSchemaAttributes : Object Constructors RequestedSchemaAttributes() Declaration public RequestedSchemaAttributes() Properties Name TODO Declaration public string Name { get; set; } Property Value Type Description System.String Restrictions TODO Declaration public IndySDKModels.Restriction[] Restrictions { get; set; } Property Value Type Description IndySDKModels.Restriction []"
  },
  "api/Hyperledger.Indy.PoolApi.InvalidPoolException.html": {
    "href": "api/Hyperledger.Indy.PoolApi.InvalidPoolException.html",
    "title": "Class InvalidPoolException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class InvalidPoolException Exception thrown when attempting to use a pool that has been closed or is invalid. Inheritance System.Object IndyException InvalidPoolException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.PoolApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class InvalidPoolException : IndyException"
  },
  "api/Hyperledger.Indy.PoolApi.PoolConfigNotCreatedException.html": {
    "href": "api/Hyperledger.Indy.PoolApi.PoolConfigNotCreatedException.html",
    "title": "Class PoolConfigNotCreatedException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class PoolConfigNotCreatedException Exception thrown when attempting to open pool which does not yet have a created configuration. Inheritance System.Object IndyException PoolConfigNotCreatedException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.PoolApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class PoolConfigNotCreatedException : IndyException"
  },
  "api/Hyperledger.Indy.PoolApi.PoolLedgerConfigExistsException.html": {
    "href": "api/Hyperledger.Indy.PoolApi.PoolLedgerConfigExistsException.html",
    "title": "Class PoolLedgerConfigExistsException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class PoolLedgerConfigExistsException Exception thrown when attempting to create a pool ledger config with same name as an existing pool ledger config. Inheritance System.Object IndyException PoolLedgerConfigExistsException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.PoolApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class PoolLedgerConfigExistsException : IndyException"
  },
  "api/Hyperledger.Indy.WalletApi.WrongWalletForPoolException.html": {
    "href": "api/Hyperledger.Indy.WalletApi.WrongWalletForPoolException.html",
    "title": "Class WrongWalletForPoolException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class WrongWalletForPoolException Exception thrown when attempting to use a wallet with the wrong pool. Inheritance System.Object IndyException WrongWalletForPoolException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class WrongWalletForPoolException : IndyException"
  },
  "api/Hyperledger.Indy.WalletApi.html": {
    "href": "api/Hyperledger.Indy.WalletApi.html",
    "title": "Namespace Hyperledger.Indy.WalletApi | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy.WalletApi Classes DuplicateWalletTypeException Exception thrown when registering a wallet type that has already been registered. InvalidWalletException Exception thrown when an attempt is made to use a closed or invalid wallet. UnknownWalletTypeException Exception thrown when attempting to open a wallet with a type that has not been registered. Wallet Represents a wallet that stores key value records and provides static methods for managing wallets. WalletAlreadyOpenedException Exception thrown when attempting to open a wallet that was already opened. WalletExistsException Exception thrown when creating a wallet and a wallet with the same name already exists. WalletType Base type for implementing custom wallet types. WalletValueNotFoundException Exception thrown when requesting a value from a wallet and the specified key does not exist. WrongWalletForPoolException Exception thrown when attempting to use a wallet with the wrong pool. Interfaces ICustomWallet Features all custom wallets must implement."
  },
  "api/Hyperledger.Indy.AnonCredsApi.AnonCreds.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.AnonCreds.html",
    "title": "Class AnonCreds | Hyperledger Indy .NET Wrapper",
    "keywords": "Class AnonCreds Provides methods for managing anonymous credentials. Inheritance System.Object AnonCreds Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public static class AnonCreds : Object Methods IssuerCreateAndStoreClaimDefAsync(Wallet, String, String, String, Boolean) Creates keys for the given schema and signature type. Declaration public static Task<string> IssuerCreateAndStoreClaimDefAsync(Wallet wallet, string issuerDid, string schemaJson, string signatureType, bool createNonRevoc) Parameters Type Name Description Wallet wallet The wallet into which the claim definition will be stored. System.String issuerDid The DID of the issuer of the claim definition. System.String schemaJson The JSON schema of the claim definition. System.String signatureType The type of signature to use. System.Boolean createNonRevoc Whether to request non-revocation claim. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a JSON string containing the claim definition. Remarks This method creates both primary and revocation keys for the given signature type and schema and stores them in the provided wallet . The generated claim definition is returned as a JSON string containing information about the signature type, schema, the issuer's public key and the unique identifier of the public key in the wallet. note Currently the only signature type that is supported is 'CL'. IssuerCreateAndStoreRevocRegAsync(Wallet, String, Int32, Int32) Creates a new revocation registry for the provided claim definition. Declaration public static Task<string> IssuerCreateAndStoreRevocRegAsync(Wallet wallet, string issuerDid, int schemaSeqNo, int maxClaimNum) Parameters Type Name Description Wallet wallet The wallet to store the revocation registry in. System.String issuerDid The DID of the issuer that signed the revoc_reg transaction to the ledger. System.Int32 schemaSeqNo The sequence number of a schema transaction in the ledger. System.Int32 maxClaimNum The maximum number of claims the new registry can process. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a JSON string containing the revocation registry. Remarks The revocation registry is stored in the provided wallet and is identified by a unique key which is returned in the revocation registry JSON string returned by the method. IssuerCreateClaimAsync(Wallet, String, String, Int32) Signs the provided claim for using the key provided in the specified claim request. Declaration public static Task<IssuerCreateClaimResult> IssuerCreateClaimAsync(Wallet wallet, string claimReqJson, string claimJson, int userRevocIndex) Parameters Type Name Description Wallet wallet The wallet containing the keys to use for signing the claim. System.String claimReqJson A claim request with a blinded secret. System.String claimJson A claim containing attribute values for each of requested attribute names. System.Int32 userRevocIndex The index of a new user in the revocation registry or -1 if absentee. Returns Type Description System.Threading.Tasks.Task < IssuerCreateClaimResult > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to an IssuerCreateClaimResult . Remarks The claimReqJson parameter must be passed a claim request that was previously created using the ProverCreateAndStoreClaimReqAsync(Wallet, String, String, String, String) method. Usually the claim request will be received from another party that has performed this action. The claim to be signed is provided in the claimJson parameter and the structure of the claim must conform to the schema from claim request provided in the claimReqJson parameter. Claims must be structured as a series of attributes, each of which has two values; a human readable value and a hex encoded value. { \"attr1\" : [\"value1\", \"value1_as_int\"], \"attr2\" : [\"value2\", \"value2_as_int\"] } For example: { 'name': ['Alex', '1139481716457488690172217916278103335'], 'height': ['175', '175'] } This method results a revocation registry update JSON and a newly issued claim JSON. The claim JSON contains the issued claim, the DID of the issuer ( issuer_did ), schema sequence number ( schema_seq_no ) and revocation registry sequence number ( revoc_reg_seq_no ) used for issuance: { \"claim\": <see claim_json above>, \"signature\": <signature>, \"revoc_reg_seq_no\", string, \"issuer_did\", string, \"schema_seq_no\", string, } IssuerCreateClaimOfferAsync(Wallet, String, String, String) TODO: Issuers the create claim offer async. Declaration public static Task<string> IssuerCreateClaimOfferAsync(Wallet wallet, string schemaJson, string issuerDid, string proverDid) Parameters Type Name Description Wallet wallet Wallet. System.String schemaJson Schema json. System.String issuerDid Issuer did. System.String proverDid Prover did. Returns Type Description System.Threading.Tasks.Task < System.String > The create claim offer async. IssuerRevokeClaimAsync(Wallet, String, Int32, Int32) Revokes a user identified by a revoc_id in a given revoc-registry. Declaration public static Task<string> IssuerRevokeClaimAsync(Wallet wallet, string issuerDid, int schemaSequenceNumber, int userRevocIndex) Parameters Type Name Description Wallet wallet The target wallet. System.String issuerDid The DID of the issuer. System.Int32 schemaSequenceNumber The sequence number of the schema. System.Int32 userRevocIndex index of the user in the revocation registry Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a revocation registry update JSON with a revoked claim. Remarks The corresponding claim definition and revocation registry must be already have been created and stored in the wallet. ProverCreateAndStoreClaimReqAsync(Wallet, String, String, String, String) Creates a claim request for the specified claim offer and stores it in the provided wallet. Declaration public static Task<string> ProverCreateAndStoreClaimReqAsync(Wallet wallet, string proverDid, string claimOfferJson, string claimDefJson, string masterSecretName) Parameters Type Name Description Wallet wallet The target wallet. System.String proverDid The DID of the prover. System.String claimOfferJson The claim offer JSON to generate a claim request for. System.String claimDefJson The claim definition JSON. System.String masterSecretName The name of the master secret in the wallet to use for generating the blinded secret. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a JSON string containing the claim request. Remarks The JSON of a claim definition that is associated with the issuer_did and schema_seq_no in the claim_offer must be provided in the claimDefJson parameter. Claim definitions can be retrieved from the ledger using the BuildGetClaimDefTxnAsync(String, Int32, String, String) method. The JSON in the claimOfferJson parameter contains information about the issuer of the claim offer: { \"issuer_did\": string, \"schema_seq_no\": string } This method gets the public key and schema the issuer_did from the ledger for and stores them in the provided wallet. Once this is complete a blinded master secret is for the master secret specified by the masterSecretName parameter. note The master secret identified by the name must be already stored in the secure wallet using the ProverCreateMasterSecretAsync(Wallet, String) method. The blinded master secret becomes a part of the claim request. ProverCreateMasterSecretAsync(Wallet, String) Creates a master secret with the specified name and stores it in the provided wallet. Declaration public static Task ProverCreateMasterSecretAsync(Wallet wallet, string masterSecretName) Parameters Type Name Description Wallet wallet The target wallet. System.String masterSecretName The name of the master secret. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation has completed. Remarks The name of the master secret must be unique within the wallet. ProverCreateProofAsync(Wallet, String, String, String, String, String, String) Creates a proof for the provided proof request. Declaration public static Task<string> ProverCreateProofAsync(Wallet wallet, string proofReqJson, string requestedClaimsJson, string schemasJson, string masterSecretName, string claimDefsJson, string revocRegsJson) Parameters Type Name Description Wallet wallet The target wallet. System.String proofReqJson The proof request JSON. System.String requestedClaimsJson The requested claims JSON. System.String schemasJson The schema JSON. System.String masterSecretName The master secret name. System.String claimDefsJson The claim definitions JSON. System.String revocRegsJson The revocation registries JSON. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a JSON string containing the proof. Remarks Either a corresponding claim with optionally revealed attributes or self-attested attribute must be provided for each requested attribute - see the ProverGetClaimsForProofReqAsync(Wallet, String) method. A proof request may request multiple claims from different schema and different issuers. All required schema, public keys and revocation registries must be provided. The proof request also contains a nonce. The proof contains either proof or self-attested attribute value for each requested attribute. The proofReqJson parameter expects a JSON string containing a proof request from the party that will verify the proof. E.g.: { \"nonce\": string, \"requested_attr1_referent\": <attr_info>, \"requested_attr2_referent\": <attr_info>, \"requested_attr3_referent\": <attr_info>, \"requested_predicate_1_referent\": <predicate_info>, \"requested_predicate_2_referent\": <predicate_info>, } The requestedClaimsJson parameter should contain either a claim or a self-attested attribute for each attribute requested in the proof request. E.g.: { \"requested_attr1_referent\": [claim1_referent_in_wallet, true <reveal_attr>], \"requested_attr2_referent\": [self_attested_attribute], \"requested_attr3_referent\": [claim2_seq_no_in_wallet, false] \"requested_attr4_referent\": [claim2_seq_no_in_wallet, true] \"requested_predicate_1_referent\": [claim2_seq_no_in_wallet], \"requested_predicate_2_referent\": [claim3_seq_no_in_wallet], } The schemasJson parameter expects the JSON for each schema that participates in the proof request. E.g.: { \"claim1_referent_in_wallet\": <schema1>, \"claim2_referent_in_wallet\": <schema2>, \"claim3_referent_in_wallet\": <schema3>, } The masterSecretName specifies the name of the master secret stored in the wallet. The claimDefsJson parameter expects the JSON for each claim definition participating in the proof request. E.g.: { \"claim1_referent_in_wallet\": <claim_def1>, \"claim2_referent_in_wallet\": <claim_def2>, \"claim3_referent_in_wallet\": <claim_def3>, } The revocRegsJson parameter expects the JSON for each revocation registry participating in the proof request. E.g.: { \"claim1_referent_in_wallet\": <revoc_reg1>, \"claim2_referent_in_wallet\": <revoc_reg2>, \"claim3_referent_in_wallet\": <revoc_reg3>, } Upon successful completion the operation will return a JSON string. For each requested attribute either a proof (with optionally revealed attribute value) or self-attested attribute value is provided. Each proof is associated with a claim and corresponding schema_seq_no, issuer_did and revoc_reg_seq_no. There is also aggregated proof part common for all claim proofs. { \"requested\": { \"requested_attr1_id\": [claim_proof1_referent, revealed_attr1, revealed_attr1_as_int], \"requested_attr2_id\": [self_attested_attribute], \"requested_attr3_id\": [claim_proof2_referent] \"requested_attr4_id\": [claim_proof2_referent, revealed_attr4, revealed_attr4_as_int], \"requested_predicate_1_referent\": [claim_proof2_referent], \"requested_predicate_2_referent\": [claim_proof3_referent], } \"claim_proofs\": { \"claim_proof1_referent\": [<claim_proof>, issuer_did, schema_seq_no, revoc_reg_seq_no], \"claim_proof2_referent\": [<claim_proof>, issuer_did, schema_seq_no, revoc_reg_seq_no], \"claim_proof3_referent\": [<claim_proof>, issuer_did, schema_seq_no, revoc_reg_seq_no] }, \"aggregated_proof\": <aggregated_proof> } ProverGetClaimOffersAsync(Wallet, String) Gets all claim offers in the provided wallet matching the specified filter. Declaration public static Task<string> ProverGetClaimOffersAsync(Wallet wallet, string filterJson) Parameters Type Name Description Wallet wallet The wallet containing the claims to get. System.String filterJson The filter JSON. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a JSON string with a list of claim offers matching the filter. Remarks Claim offers stored with the ProverStoreClaimOfferAsync(Wallet, String) can be retrieved from the wallet by searching on the DID of the issuer and/or the schema sequence number. To filter the claim offers a filterJson parameter must be provided with a JSON string which can include the following members: { \"issuer_did\": string, \"schema_seq_no\": string } The return value from this method is a JSON string that contains the list of matching claim offers in the following format: { [ { \"issuer_did\": string, \"schema_seq_no\": string }, ... ] } ProverGetClaimsAsync(Wallet, String) Gets claims matching the provided filter from the specified wallet. Declaration public static Task<string> ProverGetClaimsAsync(Wallet wallet, string filterJson) Parameters Type Name Description Wallet wallet The target wallet. System.String filterJson The filter JSON. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a JSON string containing the claim request. Remarks Claims can be filtered by Issuer, claim_def and/or Schema. To filter the results set the filterJson parameter with a JSON string that conforms to the following format: { \"issuer_did\": string, \"schema_seq_no\": string } If filterJson is null then all claims will be returned. Upon successful completion this method will return a JSON string containing an array of claims: [ { \"referent\": string, \"attrs\": [{\"attr_name\" : \"attr_value\"}, ...], \"schema_seq_no\": string, \"issuer_did\": string, \"revoc_reg_seq_no\": string, }, ... ] ProverGetClaimsForProofReqAsync(Wallet, String) Gets claims matching the provided proof request from the specified wallet. Declaration public static Task<string> ProverGetClaimsForProofReqAsync(Wallet wallet, string proofRequestJson) Parameters Type Name Description Wallet wallet The target wallet. System.String proofRequestJson The proof request JSON. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to a JSON string containing the claims for the proof request. Remarks The proof request provided in the proofRequestJson parameter must conform to the format: { \"name\": string, \"version\": string, \"nonce\": string, \"requested_attr1_referent\": <attr_info>, \"requested_attr2_referent\": <attr_info>, \"requested_attr3_referent\": <attr_info>, \"requested_predicate_1_referent\": <predicate_info>, \"requested_predicate_2_referent\": <predicate_info>, } The method will return a JSON string with claims matching the given proof request in the following format: { \"requested_attr1_referent\": [claim1, claim2], \"requested_attr2_referent\": [], \"requested_attr3_referent\": [claim3], \"requested_predicate_1_referent\": [claim1, claim3], \"requested_predicate_2_referent\": [claim2], } Each claim in the result consists of a uuid ( referent ), human-readable attributes as a key-value map ( attrs ), a schema sequence number ( schema_seq_no ) an issuer DID ( issuer_did ) and a revocation registry sequence number ( revoc_reg_seq_no ): { \"referent\": string, \"attrs\": [{\"attr_name\" : \"attr_value\"}], \"schema_seq_no\": string, \"issuer_did\": string, \"revoc_reg_seq_no\": string, } ProverStoreClaimAsync(Wallet, String, String) Updates and stores the provided claim in the specified wallet. Declaration public static Task ProverStoreClaimAsync(Wallet wallet, string claimsJson, string revRegJson) Parameters Type Name Description Wallet wallet The target wallet. System.String claimsJson The claims JSON. System.String revRegJson revocation registry json Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation has completed. Remarks This method updates the claim provided in the claimsJson parameter with a blinded master secret and stores it in the wallet specified in the wallet parameter. The claim JSON is typically structured as follows: { \"claim\": {attr1:[value, value_as_int]} \"signature\": <signature>, \"schema_seq_no\": string, \"revoc_reg_seq_no\", string \"issuer_did\", string } It contains the information about the schema_seq_no , issuer_did and revoc_reg_seq_no - see the IssuerCreateClaimAsync(Wallet, String, String, Int32) method for details. Seq_no is a sequence number of the corresponding transaction in the ledger. ProverStoreClaimOfferAsync(Wallet, String) Stores a claim offer. Declaration public static Task ProverStoreClaimOfferAsync(Wallet wallet, string claimOfferJson) Parameters Type Name Description Wallet wallet The target wallet. System.String claimOfferJson The claim offer JSON Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation has completed. Remarks Stores a claim offer from the issuer specified in the claimOfferJson into the provided wallet . The expected structure of the claim offer is as follows: { \"issuer_did\": string, \"schema_seq_no\": string } VerifierVerifyProofAsync(String, String, String, String, String) Verifies whether or not a proof is valid. Declaration public static Task<bool> VerifierVerifyProofAsync(string proofRequestJson, string proofJson, string schemasJson, string claimDefsJson, string revocRegsJson) Parameters Type Name Description System.String proofRequestJson The proof request JSON. System.String proofJson The proof JSON. System.String schemasJson The schemas JSON. System.String claimDefsJson The claim definitions JSON. System.String revocRegsJson The revocation registries JSON. Returns Type Description System.Threading.Tasks.Task < System.Boolean > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to true if the proof is valid, otherwise false. Remarks This method verifies a proof that can be made up of multiple claims. All required schema, public keys and revocation registries must be provided. The proofRequestJson parameter expects the initial proof request sent by the verifier. { \"nonce\": string, \"requested_attr1_referent\": <attr_info>, \"requested_attr2_referent\": <attr_info>, \"requested_attr3_referent\": <attr_info>, \"requested_predicate_1_referent\": <predicate_info>, \"requested_predicate_2_referent\": <predicate_info>, } The proofJson parameter expects a JSON string containing, for each requested attribute, either a proof (with optionally revealed attribute value) or self-attested attribute value. Each proof is associated with a claim and corresponding schema_seq_no, issuer_did and revoc_reg_seq_no. There is also aggregated proof part common for all claim proofs. { \"requested\": { \"requested_attr1_id\": [claim_proof1_referent, revealed_attr1, revealed_attr1_as_int], \"requested_attr2_id\": [self_attested_attribute], \"requested_attr3_id\": [claim_proof2_referent] \"requested_attr4_id\": [claim_proof2_referent, revealed_attr4, revealed_attr4_as_int], \"requested_predicate_1_referent\": [claim_proof2_referent], \"requested_predicate_2_referent\": [claim_proof3_referent], }, \"claim_proofs\": { \"claim_proof1_referent\": [<claim_proof>, issuer_did, schema_seq_no, revoc_reg_seq_no], \"claim_proof2_referent\": [<claim_proof>, issuer_did, schema_seq_no, revoc_reg_seq_no], \"claim_proof3_referent\": [<claim_proof>, issuer_did, schema_seq_no, revoc_reg_seq_no] }, \"aggregated_proof\": <aggregated_proof> } The schemasJson parameter expects a JSON string containing all schema participating in the proof. { \"claim_proof1_referent\": <schema>, \"claim_proof2_referent\": <schema>, \"claim_proof3_referent\": <schema> } The claimDefsJson parameter expects a JSON string containing all claim definitions participating in the proof. { \"claim_proof1_referent\": <claim_def>, \"claim_proof2_referent\": <claim_def>, \"claim_proof3_referent\": <claim_def> } The revocRegsJson parameter expects a JSON string containing all revocation registries participating in the proof. { \"claim_proof1_referent\": <revoc_reg>, \"claim_proof2_referent\": <revoc_reg>, \"claim_proof3_referent\": <revoc_reg> }"
  },
  "api/Hyperledger.Indy.CryptoApi.html": {
    "href": "api/Hyperledger.Indy.CryptoApi.html",
    "title": "Namespace Hyperledger.Indy.CryptoApi | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy.CryptoApi Classes AuthDecryptResult Auth decrypt result. Crypto Provides methods for pure cryptographic functions."
  },
  "api/Hyperledger.Indy.DidApi.EncryptResult.html": {
    "href": "api/Hyperledger.Indy.DidApi.EncryptResult.html",
    "title": "Class EncryptResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class EncryptResult The result of encryption. Inheritance System.Object EncryptResult Namespace : Hyperledger.Indy.DidApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public sealed class EncryptResult : Object Properties EncryptedMsg Gets the encrypted message. Declaration public byte[] EncryptedMsg { get; } Property Value Type Description System.Byte [] Nonce Gets the nonce. Declaration public byte[] Nonce { get; } Property Value Type Description System.Byte []"
  },
  "api/Hyperledger.Indy.IndyException.html": {
    "href": "api/Hyperledger.Indy.IndyException.html",
    "title": "Class IndyException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndyException Exception indicating a problem originating from the Indy SDK. Inheritance System.Object IndyException AnoncredsAccumulatorFullException AnoncredsNotIssuedException ClaimRevokedException DuplicateMasterSecretNameException InvalidUserRevocIndexException ProofRejectedException RevocationRegistryFullException UnknownCryptoException InvalidParameterException InvalidStateException InvalidStructureException IOException InvalidLedgerTransactionException LedgerConsensusException LedgerSecurityException InvalidPoolException PoolConfigNotCreatedException PoolLedgerConfigExistsException PoolLedgerTerminatedException DuplicateWalletTypeException InvalidWalletException UnknownWalletTypeException WalletAlreadyOpenedException WalletExistsException WalletValueNotFoundException WrongWalletForPoolException Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class IndyException : Exception Properties SdkErrorCode Gets the error code for the exception. Declaration public int SdkErrorCode { get; } Property Value Type Description System.Int32"
  },
  "api/Hyperledger.Indy.IndySDKModels.CredentialSchema.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.CredentialSchema.html",
    "title": "Class IndySDKModels.CredentialSchema | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.CredentialSchema TODO Inheritance System.Object IndySDKModels.CredentialSchemaBase IndySDKModels.CredentialSchema Inherited Members IndySDKModels.CredentialSchemaBase.Name IndySDKModels.CredentialSchemaBase.Version Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class CredentialSchema : IndySDKModels.CredentialSchemaBase Constructors CredentialSchema() Declaration public CredentialSchema() Properties AttributeNames TODO Declaration public string[] AttributeNames { get; set; } Property Value Type Description System.String []"
  },
  "api/Hyperledger.Indy.IndySDKModels.LedgerResult-1.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.LedgerResult-1.html",
    "title": "Class IndySDKModels.LedgerResult<TResult> | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.LedgerResult<TResult> TODO Inheritance System.Object IndySDKModels.LedgerResult<TResult> Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class LedgerResult<TResult> : Object Type Parameters Name Description TResult Constructors LedgerResult() Declaration public LedgerResult() Properties Op TODO Declaration public string Op { get; set; } Property Value Type Description System.String Result TODO Declaration public TResult Result { get; set; } Property Value Type Description TResult"
  },
  "api/Hyperledger.Indy.InvalidStructureException.html": {
    "href": "api/Hyperledger.Indy.InvalidStructureException.html",
    "title": "Class InvalidStructureException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class InvalidStructureException Exception indicating that a value being processed was not considered a valid value. Inheritance System.Object IndyException InvalidStructureException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class InvalidStructureException : IndyException"
  },
  "api/Hyperledger.Indy.PairwiseApi.Pairwise.html": {
    "href": "api/Hyperledger.Indy.PairwiseApi.Pairwise.html",
    "title": "Class Pairwise | Hyperledger Indy .NET Wrapper",
    "keywords": "Class Pairwise Provides methods for managing pairwise identifiers. Inheritance System.Object Pairwise Namespace : Hyperledger.Indy.PairwiseApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public static class Pairwise : Object Remarks A Pairwise is a record of the relationship between a DID owned by the caller of the API and one belonging to another party, referred to respectively in this API as myDID and theirDID . Pairwise records can also hold additional optional metadata. Methods CreateAsync(Wallet, String, String, String) Creates a new pairwise record between two specified DIDs in the provided wallet. Declaration public static Task CreateAsync(Wallet wallet, string theirDid, string myDid, string metadata) Parameters Type Name Description Wallet wallet The wallet to store create the pairwise record in. System.String theirDid The DID of the remote party. System.String myDid The DID belonging to the owner of the wallet. System.String metadata Optional metadata to store with the record. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task completes once the operation completes. GetAsync(Wallet, String) Gets the pairwise record associated with the specified DID from the provided wallet. Declaration public static Task<string> GetAsync(Wallet wallet, string theirDid) Parameters Type Name Description Wallet wallet The wallet to get the pairwise record from. System.String theirDid The DID belonging to another party to get the pairwise record for. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a JSON string containing a pairwise record. Remarks The JSON string that this method resolves to will contain a single pairwise record for two DIDs, the DID belonging to the record owner (my_did), the associated DID belonging to the other party (their_did) and any metadata associated with the record (metadata). [ {\"my_did\":\"my_did_for_A\",\"their_did\":\"A's_did_for_me\",\"metadata\":\"some metadata\"}, {\"my_did\":\"my_did_for_B\",\"their_did\":\"B's_did_for_me\"} ... ] Note that if no metadata is present in a record the JSON will omit the metadata key. IsExistsAsync(Wallet, String) Gets whether or not a pairwise record exists in the provided wallet for the specified DID . Declaration public static Task<bool> IsExistsAsync(Wallet wallet, string theirDid) Parameters Type Name Description Wallet wallet The wallet to check for a pairwise record. System.String theirDid The DID to check. Returns Type Description System.Threading.Tasks.Task < System.Boolean > An asynchronous System.Threading.Tasks.Task<> that resolves to true if a pairwise exists for the DID, otherwise false. ListAsync(Wallet) Lists all pairwise relationships stored in the specified wallet. Declaration public static Task<string> ListAsync(Wallet wallet) Parameters Type Name Description Wallet wallet The wallet to get the pairwise records from. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a JSON string containing an array of all pairwise relationships stored in the wallet. Remarks The JSON string that this method resolves to will contain a array of objects each of which describes a pairwise record for two DIDs, a DID belonging to the record owner (my_did) and the associated DID belonging to the other party (their_did). [ {\"my_did\":\"my_did_for_A\",\"their_did\":\"A's_did_for_me\"}, {\"my_did\":\"my_did_for_B\",\"their_did\":\"B's_did_for_me\"} ... ] Note that this call does not return any metadata associated with the pairwise records; to get the metadata use the GetAsync(Wallet, String) method. SetMetadataAsync(Wallet, String, String) Sets the metadata on the existing pairwise record for the specified DID in the provided wallet. Declaration public static Task SetMetadataAsync(Wallet wallet, string theirDid, string metadata) Parameters Type Name Description Wallet wallet The wallet containing the pairwise record. System.String theirDid The DID belonging to another party the pairwise record exists for. System.String metadata The metadata to set on the pairwise record. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task completes once the operation completes. Remarks If the pairwise record already contains any existing metadata it will be replaced with the value provided in the metadata parameter. To remove all metadata for a record provide null in the metadata parameter."
  },
  "api/Hyperledger.Indy.PairwiseApi.html": {
    "href": "api/Hyperledger.Indy.PairwiseApi.html",
    "title": "Namespace Hyperledger.Indy.PairwiseApi | Hyperledger Indy .NET Wrapper",
    "keywords": "Namespace Hyperledger.Indy.PairwiseApi Classes Pairwise Provides methods for managing pairwise identifiers."
  },
  "api/Hyperledger.Indy.WalletApi.WalletAlreadyOpenedException.html": {
    "href": "api/Hyperledger.Indy.WalletApi.WalletAlreadyOpenedException.html",
    "title": "Class WalletAlreadyOpenedException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class WalletAlreadyOpenedException Exception thrown when attempting to open a wallet that was already opened. Inheritance System.Object IndyException WalletAlreadyOpenedException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class WalletAlreadyOpenedException : IndyException"
  },
  "api/Hyperledger.Indy.WalletApi.WalletExistsException.html": {
    "href": "api/Hyperledger.Indy.WalletApi.WalletExistsException.html",
    "title": "Class WalletExistsException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class WalletExistsException Exception thrown when creating a wallet and a wallet with the same name already exists. Inheritance System.Object IndyException WalletExistsException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.WalletApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class WalletExistsException : IndyException"
  },
  "api/Hyperledger.Indy.AnonCredsApi.DuplicateMasterSecretNameException.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.DuplicateMasterSecretNameException.html",
    "title": "Class DuplicateMasterSecretNameException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class DuplicateMasterSecretNameException Exception thrown when an attempt to create a master-secret with the same name as an existing master-secret. Inheritance System.Object IndyException DuplicateMasterSecretNameException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class DuplicateMasterSecretNameException : IndyException"
  },
  "api/Hyperledger.Indy.CryptoApi.AuthDecryptResult.html": {
    "href": "api/Hyperledger.Indy.CryptoApi.AuthDecryptResult.html",
    "title": "Class AuthDecryptResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class AuthDecryptResult Auth decrypt result. Inheritance System.Object AuthDecryptResult Namespace : Hyperledger.Indy.CryptoApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class AuthDecryptResult : Object Constructors AuthDecryptResult(String, Byte[]) Initializes a new instance of the AuthDecryptResult class. Declaration public AuthDecryptResult(string their_vk, byte[] messageData) Parameters Type Name Description System.String their_vk Their vk. System.Byte [] messageData Message data. Properties MessageData Gets the decrypted message. Declaration public byte[] MessageData { get; } Property Value Type Description System.Byte [] TheirVk Gets the sender verkey Declaration public string TheirVk { get; } Property Value Type Description System.String Their verkey."
  },
  "api/Hyperledger.Indy.DidApi.EndpointForDidResult.html": {
    "href": "api/Hyperledger.Indy.DidApi.EndpointForDidResult.html",
    "title": "Class EndpointForDidResult | Hyperledger Indy .NET Wrapper",
    "keywords": "Class EndpointForDidResult Result of getting the endpoint for a DID. Inheritance System.Object EndpointForDidResult Namespace : Hyperledger.Indy.DidApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class EndpointForDidResult : Object Properties Address Gets the address. Declaration public string Address { get; } Property Value Type Description System.String TransportKey Gets the transport verification key. Declaration public string TransportKey { get; } Property Value Type Description System.String"
  },
  "api/Hyperledger.Indy.IndySDKModels.ClaimOfferResponse.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.ClaimOfferResponse.html",
    "title": "Class IndySDKModels.ClaimOfferResponse | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.ClaimOfferResponse TODO Inheritance System.Object IndySDKModels.ClaimOfferResponse Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ClaimOfferResponse : Object Constructors ClaimOfferResponse() Declaration public ClaimOfferResponse() Properties IssuerDid TODO Declaration public string IssuerDid { get; set; } Property Value Type Description System.String KeyCorrectnessProof TODO Declaration public IndySDKModels.KeyCorrectnessProof KeyCorrectnessProof { get; set; } Property Value Type Description IndySDKModels.KeyCorrectnessProof Nonce TODO Declaration public string Nonce { get; set; } Property Value Type Description System.String SchemaKey TODO Declaration public IndySDKModels.SchemaKey SchemaKey { get; set; } Property Value Type Description IndySDKModels.SchemaKey"
  },
  "api/Hyperledger.Indy.IndySDKModels.Data.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.Data.html",
    "title": "Class IndySDKModels.Data | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.Data TODO Inheritance System.Object IndySDKModels.Data Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class Data : Object Constructors Data() Declaration public Data() Properties Primary TODO Declaration public IndySDKModels.Primary Primary { get; set; } Property Value Type Description IndySDKModels.Primary Revocation TODO Declaration public Dictionary<string, string> Revocation { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , System.String >"
  },
  "api/Hyperledger.Indy.AnonCredsApi.ProofRejectedException.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.ProofRejectedException.html",
    "title": "Class ProofRejectedException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class ProofRejectedException Exception thrown when a proof has been rejected. Inheritance System.Object IndyException ProofRejectedException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ProofRejectedException : IndyException"
  },
  "api/Hyperledger.Indy.AnonCredsApi.InvalidUserRevocIndexException.html": {
    "href": "api/Hyperledger.Indy.AnonCredsApi.InvalidUserRevocIndexException.html",
    "title": "Class InvalidUserRevocIndexException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class InvalidUserRevocIndexException Exception thrown when an invalid user revocation registry index is used. Inheritance System.Object IndyException InvalidUserRevocIndexException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.AnonCredsApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class InvalidUserRevocIndexException : IndyException"
  },
  "api/Hyperledger.Indy.CryptoApi.Crypto.html": {
    "href": "api/Hyperledger.Indy.CryptoApi.Crypto.html",
    "title": "Class Crypto | Hyperledger Indy .NET Wrapper",
    "keywords": "Class Crypto Provides methods for pure cryptographic functions. Inheritance System.Object Crypto Namespace : Hyperledger.Indy.CryptoApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public static class Crypto : Object Methods AnonCryptAsync(String, Byte[]) Encrypts a message by anonymous-encryption scheme. Sealed boxes are designed to anonymously send messages to a Recipient given its public key. Only the Recipient can decrypt these messages, using its private key. While the Recipient can verify the integrity of the message, it cannot verify the identity of the Sender. Note to use DID keys with this function you can call indy_key_for_did to get key id (verkey) for specific DID. Declaration public static Task<byte[]> AnonCryptAsync(string theirVk, byte[] message) Parameters Type Name Description System.String theirVk id (verkey) of their key System.Byte [] message Message to be encrypted Returns Type Description System.Threading.Tasks.Task < System.Byte []> The crypt async. AnonDecryptAsync(Wallet, String, Byte[]) Decrypts a message encrypted using an anonymous-encryption scheme Declaration public static Task<byte[]> AnonDecryptAsync(Wallet wallet, string myVk, byte[] encryptedMessage) Parameters Type Name Description Wallet wallet The wallet containing the key-pair associated with the verification key specified in the myVk parameter. System.String myVk The verification key of the intended recipient of the encrypted message. System.Byte [] encryptedMessage The encrypted message to decrypt. Returns Type Description System.Threading.Tasks.Task < System.Byte []> An asynchronous System.Threading.Tasks.Task<> that resolves to a byte array containing the decrypted message. Remarks Sealed boxes are designed to a sender to anonymously send messages to a recipient using the recipient's public key. Only the recipient can decrypt these messages, using their private key. While the recipient can verify the integrity of the message, they cannot verify the identity of the sender. note To use DID keys with this method call the KeyForDidAsync(Pool, Wallet, String) with the desired DID to get its verification key which can be used as the myVk parameter when calling this method. Exceptions Type Condition WalletValueNotFoundException Thrown if myVk is not present in the wallet . InvalidStructureException Thrown if myVk was not used to encrypt encryptedMessage . AuthCryptAsync(Wallet, String, String, Byte[]) Encrypt a message by authenticated-encryption scheme. Sender can encrypt a confidential message specifically for Recipient, using Sender's public key. Using Recipient's public key, Sender can compute a shared secret key. Using Sender's public key and his secret key, Recipient can compute the exact same shared secret key. That shared secret key can be used to verify that the encrypted message was not tampered with, before eventually decrypting it. Declaration public static Task<byte[]> AuthCryptAsync(Wallet wallet, string myVk, string theirVk, byte[] message) Parameters Type Name Description Wallet wallet The wallet containing the key-pair to sign with. System.String myVk id (verkey) of my key. The key must be created by calling indy_create_key or indy_create_and_store_my_did System.String theirVk id (verkey) of their key System.Byte [] message message data to be encrypted Returns Type Description System.Threading.Tasks.Task < System.Byte []> The crypt async. Remarks Note to use DID keys with this function you can call indy_key_for_did to get key id (verkey) for specific DID. AuthDecryptAsync(Wallet, String, Byte[]) Decrypt a message by authenticated-encryption scheme. Sender can encrypt a confidential message specifically for Recipient, using Sender's public key. Using Recipient's public key, Sender can compute a shared secret key. Using Sender's public key and his secret key, Recipient can compute the exact same shared secret key. That shared secret key can be used to verify that the encrypted message was not tampered with, before eventually decrypting it. Declaration public static Task<AuthDecryptResult> AuthDecryptAsync(Wallet wallet, string myVk, byte[] message) Parameters Type Name Description Wallet wallet The wallet containing the key-pair to sign with. System.String myVk id (verkey) of my key. The key must be created by calling indy_create_key or indy_create_and_store_my_did System.Byte [] message The message data to be decrypted. Returns Type Description System.Threading.Tasks.Task < AuthDecryptResult > sender verkey and decrypted message Remarks Note to use DID keys with this function you can call indy_key_for_did to get key id (verkey) for specific DID. CreateKeyAsync(Wallet, String) Creates a key in the provided wallet. Declaration public static Task<string> CreateKeyAsync(Wallet wallet, string keyJson) Parameters Type Name Description Wallet wallet The wallet to create the key in. System.String keyJson The JSON string describing the key. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a string containing the verification key of the generated key-pair. Remarks The keyJson parameter must contain a JSON object although all properties of the object are optional. The schema the object must conform to are as follows: { \"seed\": string, // Optional (if not set random one will be used); Seed information that allows deterministic key creation. \"crypto_type\": string, // Optional (if not set then ed25519 curve is used); Currently only 'ed25519' value is supported for this field. } The seed member is optional and is used to specify the seed to use for key creation - if this parameter is not set then a random seed will be used. The crypto_type member is also optional and will default to ed25519 curve if not set. note At present the crypto_type member only supports the value 'ed22519'. Exceptions Type Condition InvalidStructureException Thrown if the value passed to the keyJson parameter is malformed or contains invalid data. GetKeyMetadataAsync(Wallet, String) Gets the user defined metadata stored against a key-pair in the specified wallet. Declaration public static Task<string> GetKeyMetadataAsync(Wallet wallet, string verKey) Parameters Type Name Description Wallet wallet The wallet containing the key-pair. System.String verKey The verification key of the key-pair. Returns Type Description System.Threading.Tasks.Task < System.String > An asynchronous System.Threading.Tasks.Task<> that resolves to a string containing the metadata associated with the key-pair. Remarks If no metadata is stored against the specified key-pair null will be returned. Exceptions Type Condition WalletValueNotFoundException Thrown if the wallet does not contain a key-pair matching the provided verKey or they key-pair has no metadata. SetKeyMetadataAsync(Wallet, String, String) Sets user defined metadata for a key-pair in the specified wallet. Declaration public static Task SetKeyMetadataAsync(Wallet wallet, string verKey, string metadata) Parameters Type Name Description Wallet wallet The wallet containing the key. System.String verKey The verification key of the key pair. System.String metadata The metadata to set. Returns Type Description System.Threading.Tasks.Task An asynchronous System.Threading.Tasks.Task that completes when the operation completes. Remarks Any existing metadata stored for the key-pair will be replaced. Exceptions Type Condition WalletValueNotFoundException Thrown if the wallet does not contain a key-pair matching the provided verKey . SignAsync(Wallet, String, Byte[]) Signs the provided message with the provided key. Declaration public static Task<byte[]> SignAsync(Wallet wallet, string myVk, byte[] message) Parameters Type Name Description Wallet wallet The wallet containing the key-pair to sign with. System.String myVk The verification key of the key-pair to sign with. System.Byte [] message The message to sign Returns Type Description System.Threading.Tasks.Task < System.Byte []> An asynchronous System.Threading.Tasks.Task<> that resolves to a byte array containing the signature. Remarks The key provided as the myVk parameter must have previously been stored in the wallet using the CreateKeyAsync(Wallet, String) method or the CreateAndStoreMyDidAsync(Wallet, String) method. note To use DID keys with this method call the KeyForDidAsync(Pool, Wallet, String) with the desired DID to get its verification key which can be used as the myVk parameter when calling this method. Exceptions Type Condition WalletValueNotFoundException Thrown if myVk is not present in the wallet . VerifyAsync(String, Byte[], Byte[]) Verifies a message signature with a verification key. Declaration public static Task<bool> VerifyAsync(string theirVk, byte[] message, byte[] signature) Parameters Type Name Description System.String theirVk The verification key belonging to the party that signed the message. System.Byte [] message The message that was signed. System.Byte [] signature The signature for the message. Returns Type Description System.Threading.Tasks.Task < System.Boolean > An asynchronous System.Threading.Tasks.Task<> that, when the operation completes, resolves to true if the signature was valid, otherwise false."
  },
  "api/Hyperledger.Indy.DidApi.UnknownCryptoException.html": {
    "href": "api/Hyperledger.Indy.DidApi.UnknownCryptoException.html",
    "title": "Class UnknownCryptoException | Hyperledger Indy .NET Wrapper",
    "keywords": "Class UnknownCryptoException Exception thrown when an unknown crypto format is used for DID entity keys. Inheritance System.Object IndyException UnknownCryptoException Inherited Members IndyException.SdkErrorCode Namespace : Hyperledger.Indy.DidApi Assembly : Hyperledger.Indy.Sdk.dll Syntax public class UnknownCryptoException : IndyException"
  },
  "api/Hyperledger.Indy.IndySDKModels.ClaimsForProofResponse.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.ClaimsForProofResponse.html",
    "title": "Class IndySDKModels.ClaimsForProofResponse | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.ClaimsForProofResponse TODO Inheritance System.Object IndySDKModels.ClaimsForProofResponse Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class ClaimsForProofResponse : Object Constructors ClaimsForProofResponse() Declaration public ClaimsForProofResponse() Properties Attrs TODO Declaration public Dictionary<string, IndySDKModels.Referent[]> Attrs { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IndySDKModels.Referent []> Predicates TODO Declaration public Dictionary<string, IndySDKModels.Referent[]> Predicates { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.String , IndySDKModels.Referent []>"
  },
  "api/Hyperledger.Indy.IndySDKModels.DidEntity.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.DidEntity.html",
    "title": "Class IndySDKModels.DidEntity | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.DidEntity TODO Inheritance System.Object IndySDKModels.DidEntity Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class DidEntity : Object Constructors DidEntity() Declaration public DidEntity() Properties DidInfo TODO Declaration public IndySDKModels.DidInfo DidInfo { get; set; } Property Value Type Description IndySDKModels.DidInfo Wallet TODO Declaration public Wallet Wallet { get; set; } Property Value Type Description Wallet"
  },
  "api/Hyperledger.Indy.IndySDKModels.PredicateReferent.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.PredicateReferent.html",
    "title": "Class IndySDKModels.PredicateReferent | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.PredicateReferent TODO Inheritance System.Object IndySDKModels.PredicateReferent Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class PredicateReferent : Object Constructors PredicateReferent() Declaration public PredicateReferent() Properties AttrName TODO Declaration public string AttrName { get; set; } Property Value Type Description System.String PType TODO Declaration public string PType { get; set; } Property Value Type Description System.String Restrictions TODO Declaration public IndySDKModels.Restriction[] Restrictions { get; set; } Property Value Type Description IndySDKModels.Restriction [] Value TODO Declaration public Nullable<long> Value { get; set; } Property Value Type Description System.Nullable < System.Int64 >"
  },
  "api/Hyperledger.Indy.IndySDKModels.Restriction.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.Restriction.html",
    "title": "Class IndySDKModels.Restriction | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.Restriction TODO Inheritance System.Object IndySDKModels.Restriction Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class Restriction : Object Constructors Restriction() Declaration public Restriction() Properties IssuerDid TODO Declaration public string IssuerDid { get; set; } Property Value Type Description System.String SchemaKey TODO Declaration public IndySDKModels.SchemaKey SchemaKey { get; set; } Property Value Type Description IndySDKModels.SchemaKey"
  },
  "api/Hyperledger.Indy.IndySDKModels.Value.html": {
    "href": "api/Hyperledger.Indy.IndySDKModels.Value.html",
    "title": "Class IndySDKModels.Value | Hyperledger Indy .NET Wrapper",
    "keywords": "Class IndySDKModels.Value TODO Inheritance System.Object IndySDKModels.Value Namespace : Hyperledger.Indy Assembly : Hyperledger.Indy.Sdk.dll Syntax public class Value : Object Constructors Value() Declaration public Value() Properties LedgerId TODO Declaration public Nullable<long> LedgerId { get; set; } Property Value Type Description System.Nullable < System.Int64 > PoolStateRootHash TODO Declaration public string PoolStateRootHash { get; set; } Property Value Type Description System.String StateRootHash TODO Declaration public string StateRootHash { get; set; } Property Value Type Description System.String Timestamp TODO Declaration public Nullable<long> Timestamp { get; set; } Property Value Type Description System.Nullable < System.Int64 > TxnRootHash TODO Declaration public string TxnRootHash { get; set; } Property Value Type Description System.String"
  }
}